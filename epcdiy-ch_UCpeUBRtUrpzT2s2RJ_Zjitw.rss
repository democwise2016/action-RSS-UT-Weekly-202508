<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:googleplay="http://www.google.com/schemas/play-podcasts/1.0" xmlns:media="http://www.rssboard.org/media-rss" version="2.0">
  <channel>
    <title><![CDATA[epcdiy 聊 科技[YT+]]]></title>
    <link>http://www.youtube.com/feeds/videos.xml?channel_id=UCpeUBRtUrpzT2s2RJ_Zjitw</link>
    <image>
      <url>https://yt3.googleusercontent.com/JbcjASQu8gAP8aTcv23SYU8iYj_lPJFtlBLk9HS4fm0p3TM35qPSvHQREk8c_k32j8sBAXya6R0=s900-b50-c-k-c0x008A95A5-no-rj</url>
      <title>epcdiy 聊 科技[YT+]</title>
      <link>http://www.youtube.com/feeds/videos.xml?channel_id=UCpeUBRtUrpzT2s2RJ_Zjitw</link>
    </image>
    <language>en-us</language>
    <atom:link href="https://www.youtube.com/feeds/videos.xml?channel_id=UCpeUBRtUrpzT2s2RJ_Zjitw" rel="self" type="application/rss+xml"/>
    <copyright><![CDATA[epcdiy 聊 科技[YT+]]]></copyright>
    <itunes:author><![CDATA[epcdiy 聊 科技[YT+]]]></itunes:author>
    <itunes:summary>
      <![CDATA[
      <a href="https://www.youtube.com/channel/UCpeUBRtUrpzT2s2RJ_Zjitw" target="_blank">https://www.youtube.com/channel/UCpeUBRtUrpzT2s2RJ_Zjitw</a><br />
<br />
<a href="https://www.youtube.com/feeds/videos.xml?channel_id=UCpeUBRtUrpzT2s2RJ_Zjitw" target="_blank">https://www.youtube.com/feeds/videos.xml?channel_id=UCpeUBRtUrpzT2s2RJ_Zjitw</a>
      ]]>
    </itunes:summary>
    <description>
      <![CDATA[
      <a href="https://www.youtube.com/channel/UCpeUBRtUrpzT2s2RJ_Zjitw" target="_blank">https://www.youtube.com/channel/UCpeUBRtUrpzT2s2RJ_Zjitw</a><br />
<br />
<a href="https://www.youtube.com/feeds/videos.xml?channel_id=UCpeUBRtUrpzT2s2RJ_Zjitw" target="_blank">https://www.youtube.com/feeds/videos.xml?channel_id=UCpeUBRtUrpzT2s2RJ_Zjitw</a>
      ]]>
    </description>
    <itunes:owner>
      <itunes:name><![CDATA[epcdiy 聊 科技[YT+]]]></itunes:name>
    </itunes:owner>
    <itunes:image href="https://yt3.googleusercontent.com/JbcjASQu8gAP8aTcv23SYU8iYj_lPJFtlBLk9HS4fm0p3TM35qPSvHQREk8c_k32j8sBAXya6R0=s900-b50-c-k-c0x008A95A5-no-rj"/>
<item>
      <title><![CDATA[发个有毒的MP4视频能让微信卡死闪退，谁的锅？| 微信 | 漏洞 | 小米 | 行车记录仪 | bug | 音频编码 | ADPCM | 边亮]]></title>
      <link>https://www.youtube.com/watch?v=iaL_t4X90rg</link>
      <itunes:title><![CDATA[发个有毒的MP4视频能让微信卡死闪退，谁的锅？| 微信 | 漏洞 | 小米 | 行车记录仪 | bug | 音频编码 | ADPCM | 边亮]]></itunes:title>
      <itunes:author><![CDATA[epcdiy]]></itunes:author>
      <itunes:summary>
        <![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/iaL_t4X90rg/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=iaL_t4X90rg">https://www.youtube.com/watch?v=iaL_t4X90rg</a></p><h1>值得閱讀的理由</h1> <ul> <li>本摘要揭露了一段看似普通的行車記錄儀影片，如何引發一系列災難性的軟體錯誤，從微信崩潰到聊天記錄清空，提供深刻的技術分析與教訓。</li> <li>讀者將理解特定硬體（行車記錄儀）與軟體（微信）之間因不規範的檔案格式，如何造成嚴重的用戶體驗問題，以及產品設計與規範遵守的重要性。</li> <li>摘要不僅提供技術細節，也探討了企業在處理安全漏洞時的態度差異，並為用戶提供避免類似問題的實用建議。</li> </ul> <hr /> <h1>摘要</h1> <h2>一場行車記錄儀影片引發的連環危機</h2> <p>這是一個真實的災難性故事。一位用戶在發生交通事故後，嘗試透過微信將其<strong>XX牌行車記錄儀</strong>錄下的影片發送給親屬，以便處理責任歸屬。然而，影片不僅無法順利發送，更導致了<strong>微信應用程式的直接崩潰</strong>。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_0.jpg" /></p></p> <p>情況進一步惡化，應用程式崩潰後，有一定機率會導致手機全螢幕卡死，或微信本身無回應。更甚者，如果用戶當時使用的是<strong>XX牌手機</strong>，並在微信無回應時連續點擊了七次「等待」按鈕，竟然會觸發另一個嚴重的錯誤，導致<strong>所有微信聊天記錄被清空</strong>。對於這位用戶而言，這無疑是一場個人層面的P0級事故，令人不禁思考，面對這樣雙重打擊，人們的內心是否會直接崩潰？</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_30.jpg" /></p></p> <hr /> <h2>兩大平台對待漏洞的態度差異</h2> <p>為了找出這段行車記錄儀影片中的「毒藥」以及微信崩潰的原因，作者進行了深入的逆向工程分析。在展開技術探討之前，作者透露其同事「邊亮」已將此問題分別回報給XXSRC平台與騰訊SRC平台。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_66.jpg" /></p></p> <p>結果顯示，<strong>微信方面承認了這個軟體錯誤</strong>，並給予邊亮44個安全幣作為獎勵。然而，<strong>XX牌行車記錄儀製造商卻直接忽略了這個問題</strong>，認為影響輕微，甚至反過來指責這應該是騰訊微信影片解碼器造成的崩潰，企圖推卸責任。這種截然不同的應對態度，引發了作者與觀眾對於「誰該負主要責任」的討論。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_85.jpg" /></p></p> <hr /> <h2>行車記錄儀：不規範的音訊格式是禍根</h2> <p>首先，作者對涉事<strong>行車記錄儀的錄像檔案</strong>進行了詳細分析。使用Windows和三星手機內建播放器播放時，都發現<strong>音訊無法播放</strong>。這立即引起了對音訊問題的懷疑。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_130.jpg" /></p></p> <p>透過專業工具<code>ffprobe</code>檢視MP4檔案的編碼詳細資訊，發現其音訊格式為<strong>IMA ADPCM</strong>。這是一種非常古老的音訊編碼格式，而MP4格式的最新標準（ISO/IEC 14496-14:2020）是<strong>不支援ADPCM編碼</strong>的。這解釋了為何嚴格遵守規範的播放器無法播放音訊。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_170.jpg" /></p></p> <p>進一步探究，作者拆開了這款行車記錄儀，發現其採用的是晨星的<strong>MSC8328P SOC晶片</strong>。這款晶片的通用算力較差，無法透過軟體實現編解碼，因此影片和音訊的格式完全取決於<strong>SOC晶片的硬體編碼器</strong>。<strong>IMA ADPCM</strong>正是該SOC提供的硬體音訊編解碼方案。換句話說，由於晶片層面不支援AAC等現代格式，該記錄儀被迫輸出了不符合MP4規範的檔案。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_210.jpg" /></p></p> <p>作者嘗試使用<code>ffmpeg</code>生成與此MP4檔案相同格式的ADPCM音訊MP4，但以失敗告終。同時，MP4註冊管理機構的網站也無法搜尋到ADPCM格式的MP4。這些證據都明確指出，<strong>XX牌行車記錄儀強制將不符合規範的音訊格式灌入MP4檔案中，是問題的源頭。</strong></p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_255.jpg" /></p></p> <hr /> <h2>微信：對異常格式處理不健壯導致崩潰</h2> <p>行車記錄儀的「罪狀」明確後，接下來審視微信。既然已知行車記錄儀產生的MP4格式不規範，那麼微信的崩潰顯然是由於其<strong>代碼健壯性不足</strong>所致。透過查看微信的崩潰日誌，崩潰點位於<code>libmediaplus.so</code>庫中，具體是在處理影片音訊時，呼叫<code>mediaplus::AudioDecoder::decodeAudioSample</code>，進而執行<code>mediaplus::BufferHolder::push</code>，最終在<code>memcpy</code>操作時發生錯誤。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_287.jpg" /></p></p> <p><code>libmediaplus.so</code>是微信自帶的媒體編解碼庫，用於對影片進行壓縮。作為一個原生（native）庫，它不像Java那樣擁有豐富的try-catch保護機制，一旦出現問題便會直接導致整個應用程式崩潰。很顯然，<strong>微信沒有對這種有問題的MP4檔案格式進行充分的異常處理</strong>，而是強制進入格式轉換環節，最終導致了<code>memcpy</code>操作中的<strong>空指針錯誤</strong>。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_330.jpg" /></p></p> <hr /> <h2>責任歸屬與實用建議</h2> <p>綜合來看，作者認為此次事件毫無疑問應由<strong>XX牌行車記錄儀負主要責任</strong>。行車記錄儀作為一個承擔關鍵取證作用的產品，在檔案格式規範層面理應更加嚴謹，而非簡單地「能跑就行」。微信則負次要責任，其程式碼在處理非標準格式時的健壯性不足。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_5.jpg" /></p></p> <p>作者也分享了一個小細節：該粉絲的車輛自帶行車記錄儀，但他額外加裝了XX牌記錄儀，原因竟是<strong>原廠自帶的記錄儀沒有錄音功能</strong>。這也間接解釋了為何使用者會選擇具備音訊錄製功能、但格式不規範的產品。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_6.jpg" /></p></p> <p>最後，作者提供了一個實用技巧：如果你想購買行車記錄儀，務必在試用期間提取影片檔案，並<strong>嘗試透過微信發送一次</strong>。微信會充當一個「檢查員」，幫助你檢測其檔案格式是否符合標準。同時，也別忘了將微信更新到最新版本，以獲得最新的錯誤修復。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_7.jpg" /></p></p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">這是一個真實故事。一位粉絲開車的時候出現交通事故。當他把他的XX牌行車記錄儀中的視頻導出來後。用微信發給叔叔的時候。結果視頻不僅無法發出。甚至微信直接崩潰。而且崩潰後還有一定概率導致。整個手機全屏卡死。或者微信卡死無響應。如果此時恰好還是使用XX牌手機。無響應時又點了7次等待按鈕。又會觸發另外一個bug。整個微信聊天記錄全部清空。這個bug邊亮做過視頻。好奇的話可以去他那邊看！一邊著急需要發行車記錄儀視頻給叔叔定責。另一邊文件發不出去，微信崩潰。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">數據清空。此時人內心會不會直接崩潰？換做你你頂得住嗎？不管從技術角度這是否能評為P0級事故。但至少對於這位粉絲個人來說。這就是P0級事故了。那麼為什麼一段行車記錄儀視頻會導致微信崩潰？這個視頻到底藏著什麼“毒藥”？到底微信是如何崩潰的？本期視頻，逆向！給你答案！在視頻開始之前，我先要告訴大家。我背後的男人已經把這個問題分別反饋給。XXSRC平台和騰訊SRC平台。你猜怎麼著。微信這邊認了這個bug。並給邊亮發了44個安全幣。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">夠買2個牙刷了！邊亮本打算把牙刷送給粉絲。結果粉絲為了留個紀念。把牙刷換成了捂臉的表情抱枕和狗頭表情擺件。太搞笑了。而XX這邊直接忽略了這個問題。認為影響太小。而且更奇葩的是。後面還給我加了一句話：。“這個問題感覺應該去提給騰訊src。這是微信視頻解碼器產生的crash。”. 尼瑪上來就給我甩鍋了是嗎？行！大家先不著急下結論誰對誰錯。我們先詳細從技術角度分析下。大家不妨看完我們的分析後。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">再到彈幕或者評論區裡告訴我。誰更應該為此負責？</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_106.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">首先我們來看看這個行車記錄儀錄像文件。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我們直接拿windows自帶的播放器播放。會發現音頻無法播放。用三星手機自帶播放器。也出現音頻無法播放。那我們自然會懷疑音頻有問題。我們使用專業工具ffprobe查看了這個MP4文件編碼詳細信息。可以看到音頻格式是IMA ADPCM。16位有符號雙聲道。32Khz，256Kbps. 到這一步明顯就看出不正常的地方了。ADPCM全稱自適應差分脈衝編碼調製。是一個很古老的音頻編碼格式。MP4格式最新的標準是	ISO/IEC 14496-14:。2020. 音頻這裡是不支持ADPCM編碼的。如果播放器嚴格遵守規範。不能播放反而是正常的。我用一些容錯性強的播放器。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">比如第三方的Potplayer。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">雖然可以播放，但是點開屬性。音頻編碼器這一欄是亂碼。所以問題的源頭可以確定了。就是XX這款行車記錄儀。生成的MP4文件音頻軌採用了不規範的文件格式。那麼為什麼不能生成正確的MP4音頻格式呢。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">比如常見的AAC。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我們決定再深挖一下。遂把這個行車記錄儀拆開。可以看到這款記錄儀用的SOC是來自晨星的MSC8328P。這個SOC採用的是0.6GHz 32-bit RISC 處理器。顯然，它的通用算力比較差。明顯無法通過軟件實現編解碼。換句話說，視頻/音頻採用什麼格式。完全取決於SOC芯片硬編碼器。ADPCM就是SOC提供的硬件編解碼音頻方案。也就是說這款記錄儀具體要出什麼格式的音視頻。完全取決於芯片本身支持的格式。因為芯片層面就不支持AAC。所以受限於芯片本身。最終出來了一個不符合規範的MP4文件。這裡邊亮想了一個點子。用ffmpeg能生成和這個MP4一樣的格式文件嗎？於是給ffmpeg輸入對應命令生成ADPCM音頻的MP4。結果報錯了。但如果輸出的是WMV格式，就可以成功。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_209.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我們也在MP4註冊管理機構網站搜索對應格式。也搜索不到ADPCM。這也證明了正常的MP4文件就不應該用ADPCM編碼。而這款行車記錄儀強制將不符合規範的音頻格式灌入MP4。所以行車記錄儀的“罪狀”明確了。“審判”完了行車記錄儀。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">接下來是微信了。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我們現在知道。行車記錄儀出來的MP4格式不規範。那麼微信崩潰顯然就是代碼健壯性不好導致。我們直接看微信的崩潰日誌。崩潰點在libmediaplus。so. 處理視頻中的音頻過程中，調用。mediaplus::AudioDecoder::. decodeAudioSample. 執行mediaplus::BufferHolder::。push，然後執行memcpy。因為微信發視頻都會對你發的視頻進行壓縮。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">這個so庫是微信自帶的媒體編解碼庫。微信就是調用它對音視頻進行壓縮的。這個so是一個native庫。它不像java那樣給你各種try catch保護。也就說，它一旦崩潰。會直接導致整個應用崩潰。很顯然。微信沒有對這個有問題的MP4文件格式進行異常處理。而是強制進入了格式轉換環節。所以導致memcpy空指針。看到這裡，大家覺得誰的問題更大？可以把你的看法打在公屏上。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_275.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">其實行車記錄儀播放沒聲音這點不只是我這位粉絲遇到。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">隨便網上搜索下。也會發現不少人也遇到同樣的問題。我個人的感受是此次事件毫無疑問。XX行車記錄儀負主要責任。微信負次要責任。特別是行車記錄儀這種產品承擔非常關鍵的取證作用。在文件格式規範層面肯定要更加嚴謹才對。這真不是“能跑就行”這麼簡單。也希望本視頻能引起XX官方的重視。而不是輕飄飄的忽略這個問題。甚至給我甩鍋給微信。這是非常不負責任的做法！給大家再講一個小細節。XX車出廠是自帶行車記錄儀的。而我發現這款車的車主居然自己加裝了一個行車記錄儀。我問他為什麼要這麼做的時候。這位車主告訴我。出廠自帶的行車記錄儀沒有錄音功能！此時我終於恍然大悟！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">好了，視頻的最後。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我教大家一個技巧！如果你想買行車記錄儀。務必在試用的時候提取視頻文件嘗試發一次微信。微信會幫你“檢查”他的文件格式是否符合標準的！對了。看完視頻看看微信發布更新了沒。記得把微信更新到最新版！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">好了，這就是本期視頻的全部內容了！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">喜歡逆向！關注我和邊亮哦！</p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=iaL_t4X90rg">https://www.youtube.com/watch?v=iaL_t4X90rg</a></p><p>一个“有毒”的MP4文件居然让微信闪退，腾讯SRC确认bug存在！但这一次，我不怪腾讯，这又是为什么？</p><p></p><p>BGM:</p><p>To Light the Aeon Dark</p><p>APT</p><p>Live演奏：@Issara Duo</p><p></p><p></p><p>欢迎订阅👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p>Welcome to subscribe👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p></p><p>喜欢我的视频，请按赞、分享哦~</p><p>Like my video welcome hit like and share it~</p><p></p><p>开启小铃铛第一时间接收最新资讯~</p><p>🔔Light up the little bell and receive the latest news first</p>]]>
      </itunes:summary>
      <description>
        <![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/iaL_t4X90rg/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=iaL_t4X90rg">https://www.youtube.com/watch?v=iaL_t4X90rg</a></p><h1>值得閱讀的理由</h1> <ul> <li>本摘要揭露了一段看似普通的行車記錄儀影片，如何引發一系列災難性的軟體錯誤，從微信崩潰到聊天記錄清空，提供深刻的技術分析與教訓。</li> <li>讀者將理解特定硬體（行車記錄儀）與軟體（微信）之間因不規範的檔案格式，如何造成嚴重的用戶體驗問題，以及產品設計與規範遵守的重要性。</li> <li>摘要不僅提供技術細節，也探討了企業在處理安全漏洞時的態度差異，並為用戶提供避免類似問題的實用建議。</li> </ul> <hr /> <h1>摘要</h1> <h2>一場行車記錄儀影片引發的連環危機</h2> <p>這是一個真實的災難性故事。一位用戶在發生交通事故後，嘗試透過微信將其<strong>XX牌行車記錄儀</strong>錄下的影片發送給親屬，以便處理責任歸屬。然而，影片不僅無法順利發送，更導致了<strong>微信應用程式的直接崩潰</strong>。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_0.jpg" /></p></p> <p>情況進一步惡化，應用程式崩潰後，有一定機率會導致手機全螢幕卡死，或微信本身無回應。更甚者，如果用戶當時使用的是<strong>XX牌手機</strong>，並在微信無回應時連續點擊了七次「等待」按鈕，竟然會觸發另一個嚴重的錯誤，導致<strong>所有微信聊天記錄被清空</strong>。對於這位用戶而言，這無疑是一場個人層面的P0級事故，令人不禁思考，面對這樣雙重打擊，人們的內心是否會直接崩潰？</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_30.jpg" /></p></p> <hr /> <h2>兩大平台對待漏洞的態度差異</h2> <p>為了找出這段行車記錄儀影片中的「毒藥」以及微信崩潰的原因，作者進行了深入的逆向工程分析。在展開技術探討之前，作者透露其同事「邊亮」已將此問題分別回報給XXSRC平台與騰訊SRC平台。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_66.jpg" /></p></p> <p>結果顯示，<strong>微信方面承認了這個軟體錯誤</strong>，並給予邊亮44個安全幣作為獎勵。然而，<strong>XX牌行車記錄儀製造商卻直接忽略了這個問題</strong>，認為影響輕微，甚至反過來指責這應該是騰訊微信影片解碼器造成的崩潰，企圖推卸責任。這種截然不同的應對態度，引發了作者與觀眾對於「誰該負主要責任」的討論。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_85.jpg" /></p></p> <hr /> <h2>行車記錄儀：不規範的音訊格式是禍根</h2> <p>首先，作者對涉事<strong>行車記錄儀的錄像檔案</strong>進行了詳細分析。使用Windows和三星手機內建播放器播放時，都發現<strong>音訊無法播放</strong>。這立即引起了對音訊問題的懷疑。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_130.jpg" /></p></p> <p>透過專業工具<code>ffprobe</code>檢視MP4檔案的編碼詳細資訊，發現其音訊格式為<strong>IMA ADPCM</strong>。這是一種非常古老的音訊編碼格式，而MP4格式的最新標準（ISO/IEC 14496-14:2020）是<strong>不支援ADPCM編碼</strong>的。這解釋了為何嚴格遵守規範的播放器無法播放音訊。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_170.jpg" /></p></p> <p>進一步探究，作者拆開了這款行車記錄儀，發現其採用的是晨星的<strong>MSC8328P SOC晶片</strong>。這款晶片的通用算力較差，無法透過軟體實現編解碼，因此影片和音訊的格式完全取決於<strong>SOC晶片的硬體編碼器</strong>。<strong>IMA ADPCM</strong>正是該SOC提供的硬體音訊編解碼方案。換句話說，由於晶片層面不支援AAC等現代格式，該記錄儀被迫輸出了不符合MP4規範的檔案。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_210.jpg" /></p></p> <p>作者嘗試使用<code>ffmpeg</code>生成與此MP4檔案相同格式的ADPCM音訊MP4，但以失敗告終。同時，MP4註冊管理機構的網站也無法搜尋到ADPCM格式的MP4。這些證據都明確指出，<strong>XX牌行車記錄儀強制將不符合規範的音訊格式灌入MP4檔案中，是問題的源頭。</strong></p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_255.jpg" /></p></p> <hr /> <h2>微信：對異常格式處理不健壯導致崩潰</h2> <p>行車記錄儀的「罪狀」明確後，接下來審視微信。既然已知行車記錄儀產生的MP4格式不規範，那麼微信的崩潰顯然是由於其<strong>代碼健壯性不足</strong>所致。透過查看微信的崩潰日誌，崩潰點位於<code>libmediaplus.so</code>庫中，具體是在處理影片音訊時，呼叫<code>mediaplus::AudioDecoder::decodeAudioSample</code>，進而執行<code>mediaplus::BufferHolder::push</code>，最終在<code>memcpy</code>操作時發生錯誤。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_287.jpg" /></p></p> <p><code>libmediaplus.so</code>是微信自帶的媒體編解碼庫，用於對影片進行壓縮。作為一個原生（native）庫，它不像Java那樣擁有豐富的try-catch保護機制，一旦出現問題便會直接導致整個應用程式崩潰。很顯然，<strong>微信沒有對這種有問題的MP4檔案格式進行充分的異常處理</strong>，而是強制進入格式轉換環節，最終導致了<code>memcpy</code>操作中的<strong>空指針錯誤</strong>。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_330.jpg" /></p></p> <hr /> <h2>責任歸屬與實用建議</h2> <p>綜合來看，作者認為此次事件毫無疑問應由<strong>XX牌行車記錄儀負主要責任</strong>。行車記錄儀作為一個承擔關鍵取證作用的產品，在檔案格式規範層面理應更加嚴謹，而非簡單地「能跑就行」。微信則負次要責任，其程式碼在處理非標準格式時的健壯性不足。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_5.jpg" /></p></p> <p>作者也分享了一個小細節：該粉絲的車輛自帶行車記錄儀，但他額外加裝了XX牌記錄儀，原因竟是<strong>原廠自帶的記錄儀沒有錄音功能</strong>。這也間接解釋了為何使用者會選擇具備音訊錄製功能、但格式不規範的產品。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_6.jpg" /></p></p> <p>最後，作者提供了一個實用技巧：如果你想購買行車記錄儀，務必在試用期間提取影片檔案，並<strong>嘗試透過微信發送一次</strong>。微信會充當一個「檢查員」，幫助你檢測其檔案格式是否符合標準。同時，也別忘了將微信更新到最新版本，以獲得最新的錯誤修復。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_7.jpg" /></p></p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">這是一個真實故事。一位粉絲開車的時候出現交通事故。當他把他的XX牌行車記錄儀中的視頻導出來後。用微信發給叔叔的時候。結果視頻不僅無法發出。甚至微信直接崩潰。而且崩潰後還有一定概率導致。整個手機全屏卡死。或者微信卡死無響應。如果此時恰好還是使用XX牌手機。無響應時又點了7次等待按鈕。又會觸發另外一個bug。整個微信聊天記錄全部清空。這個bug邊亮做過視頻。好奇的話可以去他那邊看！一邊著急需要發行車記錄儀視頻給叔叔定責。另一邊文件發不出去，微信崩潰。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">數據清空。此時人內心會不會直接崩潰？換做你你頂得住嗎？不管從技術角度這是否能評為P0級事故。但至少對於這位粉絲個人來說。這就是P0級事故了。那麼為什麼一段行車記錄儀視頻會導致微信崩潰？這個視頻到底藏著什麼“毒藥”？到底微信是如何崩潰的？本期視頻，逆向！給你答案！在視頻開始之前，我先要告訴大家。我背後的男人已經把這個問題分別反饋給。XXSRC平台和騰訊SRC平台。你猜怎麼著。微信這邊認了這個bug。並給邊亮發了44個安全幣。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">夠買2個牙刷了！邊亮本打算把牙刷送給粉絲。結果粉絲為了留個紀念。把牙刷換成了捂臉的表情抱枕和狗頭表情擺件。太搞笑了。而XX這邊直接忽略了這個問題。認為影響太小。而且更奇葩的是。後面還給我加了一句話：。“這個問題感覺應該去提給騰訊src。這是微信視頻解碼器產生的crash。”. 尼瑪上來就給我甩鍋了是嗎？行！大家先不著急下結論誰對誰錯。我們先詳細從技術角度分析下。大家不妨看完我們的分析後。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">再到彈幕或者評論區裡告訴我。誰更應該為此負責？</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_106.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">首先我們來看看這個行車記錄儀錄像文件。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我們直接拿windows自帶的播放器播放。會發現音頻無法播放。用三星手機自帶播放器。也出現音頻無法播放。那我們自然會懷疑音頻有問題。我們使用專業工具ffprobe查看了這個MP4文件編碼詳細信息。可以看到音頻格式是IMA ADPCM。16位有符號雙聲道。32Khz，256Kbps. 到這一步明顯就看出不正常的地方了。ADPCM全稱自適應差分脈衝編碼調製。是一個很古老的音頻編碼格式。MP4格式最新的標準是	ISO/IEC 14496-14:。2020. 音頻這裡是不支持ADPCM編碼的。如果播放器嚴格遵守規範。不能播放反而是正常的。我用一些容錯性強的播放器。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">比如第三方的Potplayer。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">雖然可以播放，但是點開屬性。音頻編碼器這一欄是亂碼。所以問題的源頭可以確定了。就是XX這款行車記錄儀。生成的MP4文件音頻軌採用了不規範的文件格式。那麼為什麼不能生成正確的MP4音頻格式呢。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">比如常見的AAC。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我們決定再深挖一下。遂把這個行車記錄儀拆開。可以看到這款記錄儀用的SOC是來自晨星的MSC8328P。這個SOC採用的是0.6GHz 32-bit RISC 處理器。顯然，它的通用算力比較差。明顯無法通過軟件實現編解碼。換句話說，視頻/音頻採用什麼格式。完全取決於SOC芯片硬編碼器。ADPCM就是SOC提供的硬件編解碼音頻方案。也就是說這款記錄儀具體要出什麼格式的音視頻。完全取決於芯片本身支持的格式。因為芯片層面就不支持AAC。所以受限於芯片本身。最終出來了一個不符合規範的MP4文件。這裡邊亮想了一個點子。用ffmpeg能生成和這個MP4一樣的格式文件嗎？於是給ffmpeg輸入對應命令生成ADPCM音頻的MP4。結果報錯了。但如果輸出的是WMV格式，就可以成功。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_209.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我們也在MP4註冊管理機構網站搜索對應格式。也搜索不到ADPCM。這也證明了正常的MP4文件就不應該用ADPCM編碼。而這款行車記錄儀強制將不符合規範的音頻格式灌入MP4。所以行車記錄儀的“罪狀”明確了。“審判”完了行車記錄儀。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">接下來是微信了。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我們現在知道。行車記錄儀出來的MP4格式不規範。那麼微信崩潰顯然就是代碼健壯性不好導致。我們直接看微信的崩潰日誌。崩潰點在libmediaplus。so. 處理視頻中的音頻過程中，調用。mediaplus::AudioDecoder::. decodeAudioSample. 執行mediaplus::BufferHolder::。push，然後執行memcpy。因為微信發視頻都會對你發的視頻進行壓縮。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">這個so庫是微信自帶的媒體編解碼庫。微信就是調用它對音視頻進行壓縮的。這個so是一個native庫。它不像java那樣給你各種try catch保護。也就說，它一旦崩潰。會直接導致整個應用崩潰。很顯然。微信沒有對這個有問題的MP4文件格式進行異常處理。而是強制進入了格式轉換環節。所以導致memcpy空指針。看到這裡，大家覺得誰的問題更大？可以把你的看法打在公屏上。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_275.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">其實行車記錄儀播放沒聲音這點不只是我這位粉絲遇到。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">隨便網上搜索下。也會發現不少人也遇到同樣的問題。我個人的感受是此次事件毫無疑問。XX行車記錄儀負主要責任。微信負次要責任。特別是行車記錄儀這種產品承擔非常關鍵的取證作用。在文件格式規範層面肯定要更加嚴謹才對。這真不是“能跑就行”這麼簡單。也希望本視頻能引起XX官方的重視。而不是輕飄飄的忽略這個問題。甚至給我甩鍋給微信。這是非常不負責任的做法！給大家再講一個小細節。XX車出廠是自帶行車記錄儀的。而我發現這款車的車主居然自己加裝了一個行車記錄儀。我問他為什麼要這麼做的時候。這位車主告訴我。出廠自帶的行車記錄儀沒有錄音功能！此時我終於恍然大悟！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">好了，視頻的最後。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我教大家一個技巧！如果你想買行車記錄儀。務必在試用的時候提取視頻文件嘗試發一次微信。微信會幫你“檢查”他的文件格式是否符合標準的！對了。看完視頻看看微信發布更新了沒。記得把微信更新到最新版！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">好了，這就是本期視頻的全部內容了！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">喜歡逆向！關注我和邊亮哦！</p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=iaL_t4X90rg">https://www.youtube.com/watch?v=iaL_t4X90rg</a></p><p>一个“有毒”的MP4文件居然让微信闪退，腾讯SRC确认bug存在！但这一次，我不怪腾讯，这又是为什么？</p><p></p><p>BGM:</p><p>To Light the Aeon Dark</p><p>APT</p><p>Live演奏：@Issara Duo</p><p></p><p></p><p>欢迎订阅👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p>Welcome to subscribe👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p></p><p>喜欢我的视频，请按赞、分享哦~</p><p>Like my video welcome hit like and share it~</p><p></p><p>开启小铃铛第一时间接收最新资讯~</p><p>🔔Light up the little bell and receive the latest news first</p>]]>
      </description>
      <content:encoded><![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/iaL_t4X90rg/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=iaL_t4X90rg">https://www.youtube.com/watch?v=iaL_t4X90rg</a></p><h1>值得閱讀的理由</h1> <ul> <li>本摘要揭露了一段看似普通的行車記錄儀影片，如何引發一系列災難性的軟體錯誤，從微信崩潰到聊天記錄清空，提供深刻的技術分析與教訓。</li> <li>讀者將理解特定硬體（行車記錄儀）與軟體（微信）之間因不規範的檔案格式，如何造成嚴重的用戶體驗問題，以及產品設計與規範遵守的重要性。</li> <li>摘要不僅提供技術細節，也探討了企業在處理安全漏洞時的態度差異，並為用戶提供避免類似問題的實用建議。</li> </ul> <hr /> <h1>摘要</h1> <h2>一場行車記錄儀影片引發的連環危機</h2> <p>這是一個真實的災難性故事。一位用戶在發生交通事故後，嘗試透過微信將其<strong>XX牌行車記錄儀</strong>錄下的影片發送給親屬，以便處理責任歸屬。然而，影片不僅無法順利發送，更導致了<strong>微信應用程式的直接崩潰</strong>。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_0.jpg" /></p></p> <p>情況進一步惡化，應用程式崩潰後，有一定機率會導致手機全螢幕卡死，或微信本身無回應。更甚者，如果用戶當時使用的是<strong>XX牌手機</strong>，並在微信無回應時連續點擊了七次「等待」按鈕，竟然會觸發另一個嚴重的錯誤，導致<strong>所有微信聊天記錄被清空</strong>。對於這位用戶而言，這無疑是一場個人層面的P0級事故，令人不禁思考，面對這樣雙重打擊，人們的內心是否會直接崩潰？</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_30.jpg" /></p></p> <hr /> <h2>兩大平台對待漏洞的態度差異</h2> <p>為了找出這段行車記錄儀影片中的「毒藥」以及微信崩潰的原因，作者進行了深入的逆向工程分析。在展開技術探討之前，作者透露其同事「邊亮」已將此問題分別回報給XXSRC平台與騰訊SRC平台。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_66.jpg" /></p></p> <p>結果顯示，<strong>微信方面承認了這個軟體錯誤</strong>，並給予邊亮44個安全幣作為獎勵。然而，<strong>XX牌行車記錄儀製造商卻直接忽略了這個問題</strong>，認為影響輕微，甚至反過來指責這應該是騰訊微信影片解碼器造成的崩潰，企圖推卸責任。這種截然不同的應對態度，引發了作者與觀眾對於「誰該負主要責任」的討論。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_85.jpg" /></p></p> <hr /> <h2>行車記錄儀：不規範的音訊格式是禍根</h2> <p>首先，作者對涉事<strong>行車記錄儀的錄像檔案</strong>進行了詳細分析。使用Windows和三星手機內建播放器播放時，都發現<strong>音訊無法播放</strong>。這立即引起了對音訊問題的懷疑。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_130.jpg" /></p></p> <p>透過專業工具<code>ffprobe</code>檢視MP4檔案的編碼詳細資訊，發現其音訊格式為<strong>IMA ADPCM</strong>。這是一種非常古老的音訊編碼格式，而MP4格式的最新標準（ISO/IEC 14496-14:2020）是<strong>不支援ADPCM編碼</strong>的。這解釋了為何嚴格遵守規範的播放器無法播放音訊。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_170.jpg" /></p></p> <p>進一步探究，作者拆開了這款行車記錄儀，發現其採用的是晨星的<strong>MSC8328P SOC晶片</strong>。這款晶片的通用算力較差，無法透過軟體實現編解碼，因此影片和音訊的格式完全取決於<strong>SOC晶片的硬體編碼器</strong>。<strong>IMA ADPCM</strong>正是該SOC提供的硬體音訊編解碼方案。換句話說，由於晶片層面不支援AAC等現代格式，該記錄儀被迫輸出了不符合MP4規範的檔案。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_210.jpg" /></p></p> <p>作者嘗試使用<code>ffmpeg</code>生成與此MP4檔案相同格式的ADPCM音訊MP4，但以失敗告終。同時，MP4註冊管理機構的網站也無法搜尋到ADPCM格式的MP4。這些證據都明確指出，<strong>XX牌行車記錄儀強制將不符合規範的音訊格式灌入MP4檔案中，是問題的源頭。</strong></p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_255.jpg" /></p></p> <hr /> <h2>微信：對異常格式處理不健壯導致崩潰</h2> <p>行車記錄儀的「罪狀」明確後，接下來審視微信。既然已知行車記錄儀產生的MP4格式不規範，那麼微信的崩潰顯然是由於其<strong>代碼健壯性不足</strong>所致。透過查看微信的崩潰日誌，崩潰點位於<code>libmediaplus.so</code>庫中，具體是在處理影片音訊時，呼叫<code>mediaplus::AudioDecoder::decodeAudioSample</code>，進而執行<code>mediaplus::BufferHolder::push</code>，最終在<code>memcpy</code>操作時發生錯誤。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_287.jpg" /></p></p> <p><code>libmediaplus.so</code>是微信自帶的媒體編解碼庫，用於對影片進行壓縮。作為一個原生（native）庫，它不像Java那樣擁有豐富的try-catch保護機制，一旦出現問題便會直接導致整個應用程式崩潰。很顯然，<strong>微信沒有對這種有問題的MP4檔案格式進行充分的異常處理</strong>，而是強制進入格式轉換環節，最終導致了<code>memcpy</code>操作中的<strong>空指針錯誤</strong>。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_330.jpg" /></p></p> <hr /> <h2>責任歸屬與實用建議</h2> <p>綜合來看，作者認為此次事件毫無疑問應由<strong>XX牌行車記錄儀負主要責任</strong>。行車記錄儀作為一個承擔關鍵取證作用的產品，在檔案格式規範層面理應更加嚴謹，而非簡單地「能跑就行」。微信則負次要責任，其程式碼在處理非標準格式時的健壯性不足。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_5.jpg" /></p></p> <p>作者也分享了一個小細節：該粉絲的車輛自帶行車記錄儀，但他額外加裝了XX牌記錄儀，原因竟是<strong>原廠自帶的記錄儀沒有錄音功能</strong>。這也間接解釋了為何使用者會選擇具備音訊錄製功能、但格式不規範的產品。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_6.jpg" /></p></p> <p>最後，作者提供了一個實用技巧：如果你想購買行車記錄儀，務必在試用期間提取影片檔案，並<strong>嘗試透過微信發送一次</strong>。微信會充當一個「檢查員」，幫助你檢測其檔案格式是否符合標準。同時，也別忘了將微信更新到最新版本，以獲得最新的錯誤修復。</p> <p><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_7.jpg" /></p></p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">這是一個真實故事。一位粉絲開車的時候出現交通事故。當他把他的XX牌行車記錄儀中的視頻導出來後。用微信發給叔叔的時候。結果視頻不僅無法發出。甚至微信直接崩潰。而且崩潰後還有一定概率導致。整個手機全屏卡死。或者微信卡死無響應。如果此時恰好還是使用XX牌手機。無響應時又點了7次等待按鈕。又會觸發另外一個bug。整個微信聊天記錄全部清空。這個bug邊亮做過視頻。好奇的話可以去他那邊看！一邊著急需要發行車記錄儀視頻給叔叔定責。另一邊文件發不出去，微信崩潰。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">數據清空。此時人內心會不會直接崩潰？換做你你頂得住嗎？不管從技術角度這是否能評為P0級事故。但至少對於這位粉絲個人來說。這就是P0級事故了。那麼為什麼一段行車記錄儀視頻會導致微信崩潰？這個視頻到底藏著什麼“毒藥”？到底微信是如何崩潰的？本期視頻，逆向！給你答案！在視頻開始之前，我先要告訴大家。我背後的男人已經把這個問題分別反饋給。XXSRC平台和騰訊SRC平台。你猜怎麼著。微信這邊認了這個bug。並給邊亮發了44個安全幣。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">夠買2個牙刷了！邊亮本打算把牙刷送給粉絲。結果粉絲為了留個紀念。把牙刷換成了捂臉的表情抱枕和狗頭表情擺件。太搞笑了。而XX這邊直接忽略了這個問題。認為影響太小。而且更奇葩的是。後面還給我加了一句話：。“這個問題感覺應該去提給騰訊src。這是微信視頻解碼器產生的crash。”. 尼瑪上來就給我甩鍋了是嗎？行！大家先不著急下結論誰對誰錯。我們先詳細從技術角度分析下。大家不妨看完我們的分析後。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">再到彈幕或者評論區裡告訴我。誰更應該為此負責？</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_106.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">首先我們來看看這個行車記錄儀錄像文件。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我們直接拿windows自帶的播放器播放。會發現音頻無法播放。用三星手機自帶播放器。也出現音頻無法播放。那我們自然會懷疑音頻有問題。我們使用專業工具ffprobe查看了這個MP4文件編碼詳細信息。可以看到音頻格式是IMA ADPCM。16位有符號雙聲道。32Khz，256Kbps. 到這一步明顯就看出不正常的地方了。ADPCM全稱自適應差分脈衝編碼調製。是一個很古老的音頻編碼格式。MP4格式最新的標準是	ISO/IEC 14496-14:。2020. 音頻這裡是不支持ADPCM編碼的。如果播放器嚴格遵守規範。不能播放反而是正常的。我用一些容錯性強的播放器。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">比如第三方的Potplayer。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">雖然可以播放，但是點開屬性。音頻編碼器這一欄是亂碼。所以問題的源頭可以確定了。就是XX這款行車記錄儀。生成的MP4文件音頻軌採用了不規範的文件格式。那麼為什麼不能生成正確的MP4音頻格式呢。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">比如常見的AAC。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我們決定再深挖一下。遂把這個行車記錄儀拆開。可以看到這款記錄儀用的SOC是來自晨星的MSC8328P。這個SOC採用的是0.6GHz 32-bit RISC 處理器。顯然，它的通用算力比較差。明顯無法通過軟件實現編解碼。換句話說，視頻/音頻採用什麼格式。完全取決於SOC芯片硬編碼器。ADPCM就是SOC提供的硬件編解碼音頻方案。也就是說這款記錄儀具體要出什麼格式的音視頻。完全取決於芯片本身支持的格式。因為芯片層面就不支持AAC。所以受限於芯片本身。最終出來了一個不符合規範的MP4文件。這裡邊亮想了一個點子。用ffmpeg能生成和這個MP4一樣的格式文件嗎？於是給ffmpeg輸入對應命令生成ADPCM音頻的MP4。結果報錯了。但如果輸出的是WMV格式，就可以成功。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_209.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我們也在MP4註冊管理機構網站搜索對應格式。也搜索不到ADPCM。這也證明了正常的MP4文件就不應該用ADPCM編碼。而這款行車記錄儀強制將不符合規範的音頻格式灌入MP4。所以行車記錄儀的“罪狀”明確了。“審判”完了行車記錄儀。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">接下來是微信了。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我們現在知道。行車記錄儀出來的MP4格式不規範。那麼微信崩潰顯然就是代碼健壯性不好導致。我們直接看微信的崩潰日誌。崩潰點在libmediaplus。so. 處理視頻中的音頻過程中，調用。mediaplus::AudioDecoder::. decodeAudioSample. 執行mediaplus::BufferHolder::。push，然後執行memcpy。因為微信發視頻都會對你發的視頻進行壓縮。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">這個so庫是微信自帶的媒體編解碼庫。微信就是調用它對音視頻進行壓縮的。這個so是一個native庫。它不像java那樣給你各種try catch保護。也就說，它一旦崩潰。會直接導致整個應用崩潰。很顯然。微信沒有對這個有問題的MP4文件格式進行異常處理。而是強制進入了格式轉換環節。所以導致memcpy空指針。看到這裡，大家覺得誰的問題更大？可以把你的看法打在公屏上。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/iaL_t4X90rg_275.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">其實行車記錄儀播放沒聲音這點不只是我這位粉絲遇到。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">隨便網上搜索下。也會發現不少人也遇到同樣的問題。我個人的感受是此次事件毫無疑問。XX行車記錄儀負主要責任。微信負次要責任。特別是行車記錄儀這種產品承擔非常關鍵的取證作用。在文件格式規範層面肯定要更加嚴謹才對。這真不是“能跑就行”這麼簡單。也希望本視頻能引起XX官方的重視。而不是輕飄飄的忽略這個問題。甚至給我甩鍋給微信。這是非常不負責任的做法！給大家再講一個小細節。XX車出廠是自帶行車記錄儀的。而我發現這款車的車主居然自己加裝了一個行車記錄儀。我問他為什麼要這麼做的時候。這位車主告訴我。出廠自帶的行車記錄儀沒有錄音功能！此時我終於恍然大悟！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">好了，視頻的最後。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我教大家一個技巧！如果你想買行車記錄儀。務必在試用的時候提取視頻文件嘗試發一次微信。微信會幫你“檢查”他的文件格式是否符合標準的！對了。看完視頻看看微信發布更新了沒。記得把微信更新到最新版！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">好了，這就是本期視頻的全部內容了！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">喜歡逆向！關注我和邊亮哦！</p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=iaL_t4X90rg">https://www.youtube.com/watch?v=iaL_t4X90rg</a></p><p>一个“有毒”的MP4文件居然让微信闪退，腾讯SRC确认bug存在！但这一次，我不怪腾讯，这又是为什么？</p><p></p><p>BGM:</p><p>To Light the Aeon Dark</p><p>APT</p><p>Live演奏：@Issara Duo</p><p></p><p></p><p>欢迎订阅👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p>Welcome to subscribe👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p></p><p>喜欢我的视频，请按赞、分享哦~</p><p>Like my video welcome hit like and share it~</p><p></p><p>开启小铃铛第一时间接收最新资讯~</p><p>🔔Light up the little bell and receive the latest news first</p>]]></content:encoded>
      <itunes:image href="https://i.ytimg.com/vi/iaL_t4X90rg/hqdefault.jpg"/>
      <pubDate>2025-10-01T08:27:10.000Z</pubDate>
    </item><item>
      <title><![CDATA[为何苹果无刷新功能，而Windows必须有？ | 刷新 | 苹果 | Apple | 微软 | Windows | Win95 | MacOS | 文件 | 边亮]]></title>
      <link>https://www.youtube.com/watch?v=heBmfQspi_s</link>
      <itunes:title><![CDATA[为何苹果无刷新功能，而Windows必须有？ | 刷新 | 苹果 | Apple | 微软 | Windows | Win95 | MacOS | 文件 | 边亮]]></itunes:title>
      <itunes:author><![CDATA[epcdiy]]></itunes:author>
      <itunes:summary>
        <![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/heBmfQspi_s/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=heBmfQspi_s">https://www.youtube.com/watch?v=heBmfQspi_s</a></p><h1>值得閱讀的理由</h1> <ul><li>深入淺出地解釋了Windows右鍵「刷新」功能的歷史、原理及實際用途，並探討了其在不同操作系統中的設計哲學差異。</li><li>透過生動的比喻與實際案例（如外賣App、Win95實驗、Mac共享文件），讓讀者更容易理解抽象的計算機系統運作機制，如監聽者設計模式。</li><li>不僅解答了「刷新到底刷了個啥」的疑問，更揭示了現代操作系統中刷新功能背後遠超想像的複雜性與其作為「兜底」機制的重要性。</li></ul> <hr /> <h1>摘要</h1> <p>這段影片的作者探討了Windows操作系統中一個看似簡單卻引人深思的功能——「<strong>刷新</strong>」。他觀察到許多使用者，特別是資深用戶，在剛開機時習慣點擊右鍵刷新，以此判斷電腦是否「<strong>就緒</strong>」。然而，這個功能在Mac和大部分Linux發行版中卻沒有，甚至在Win11中被隱藏起來，引發了「刷新到底刷了個啥」的疑問。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_88.jpg" /></p> <h2>作者對「刷新」的情感與安全感</h2> <p>對於作者而言，「刷新」功能帶來一種<strong>安全感</strong>，讓他感覺到硬碟是「在線」的。他以檢查外賣訂單狀態為例，說明主動刷新能消除資訊延遲的不確定性，即使結果不變，也能獲得安心。這與Mac的Finder形成對比，後者不允許用戶主動刷新，只能被動等待系統更新，這讓作者感到若遇到Bug時無從確認。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_160.jpg" /></p> <h2>刷新功能的兩種情境：線上與本地</h2> <p>作者指出，「刷新」顧名思義就是將界面內容更新到最新。他將刷新分為兩種情境：線上內容如<strong>瀏覽器網頁</strong>，和本地內容如<strong>文件資源管理器或桌面</strong>。瀏覽器刷新是必需的，因為大多數網頁不會主動更新，有時甚至需<strong>清緩存</strong>才能生效。然而，對於電腦本地的文件資源管理器或桌面，理論上是不需要手動刷新功能的。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_235.jpg" /></p> <h2>操作系統的自動更新機制與Win95的案例</h2> <p>那麼，為什麼本地文件資源管理器可以做到自動刷新呢？作者解釋，當本地文件發生更改時，系統會自動更新內容。他追溯到Win95，透過實驗證明即使是最早的Win95，在命令行創建文件後，桌面或文件夾也能<strong>自動顯示</strong>新文件，而無需手動刷新。這是因為文件資源管理器預設有一個<strong>監聽機制</strong>。當文件系統廣播文件創建的消息時，系統組件會監聽這些消息，負責展示文件的組件便會立即更新顯示。這正是經典的「<strong>監聽者設計模式</strong>」原理，MacOS和Linux也採用了同樣的原理。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_6.jpg" /></p> <h2>刷新功能存在的真正原因：作為「兜底」</h2> <p>作者進一步指出，刷新其實是一個<strong>兜底功能</strong>。雖然監聽者模式要求所有程序在操作文件後都必須廣播其行為，但由於Windows和Linux的<strong>開放性</strong>，總有可能出現程序員「偷懶」或程序錯誤，導致信息未被廣播出去。例如，創建新文件卻沒有廣播可能導致文件「隱身」，刪除文件卻沒有廣播則會出現「殭屍文件」。正因如此，Windows和Linux才需要刷新功能來應對這些可能發生的<strong>不一致情況</strong>。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_7.jpg" /></p> <h2>Mac為何缺乏刷新選項？</h2> <p>相對地，Mac系統因其相對<strong>封閉</strong>且高度統一的特性，蘋果公司對其系統有較高「信心」，認為不會出現程序員遺漏廣播的情況，因此Finder中沒有提供手動刷新選項。然而，作者認為即使Mac的代碼再天衣無縫，也無法保證在所有情況下都不丟失消息，特別是在涉及<strong>文件共享</strong>時。他演示了Mac連接Samba服務器時，若在斷網狀態下於服務器端創建文件，Mac在重新連網後並不會顯示該文件，這突顯了缺乏刷新功能時可能導致的<strong>信息不同步</strong>問題。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_9.jpg" /></p> <h2>刷新在現代系統中的複雜性</h2> <p>作者透過「逆向」技術揭示了現代操作系統中刷新功能的複雜性。他指出，Win98的桌面刷新不僅更新文件，還額外調用了處理<strong>桌面網頁</strong>的msjava動態庫。而Win11的刷新所執行的內容則更加龐大，涉及多達上百個函數，包括資源管理器界面刷新、文件圖標刷新、托盤圖標刷新、通知區域刷新，甚至還有Windows<strong>激活相關</strong>的邏輯。作者總結道，當系統邏輯越加越多，信息不可控的情況就越明顯，因此在某種程度上，Windows更需要刷新來作為<strong>最終的保障</strong>。</p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">當你在桌面或任意文件夾裡點擊鼠標右鍵彈出菜單的時候。你是否還記得有一個讓你印象深刻的選項---刷新。如果剛開機進桌面。你有點右鍵刷新的習慣。那說明你應該是奔四的人了。我記得當年電腦配置都很差。特別是使用xp的時候。開機剛進桌面後電腦可能還是比較卡的。如果貿然直接打開一個大型程序。可能會讓電腦更卡。而在桌面點右鍵刷新，如果馬上響應。那麼說明電腦已經“就緒”了。但不知道大家是否知道。這個“刷新”功能到底是做什麼用的？</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">為什麼Mac和大部分Linux發行版的圖形化界面。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">都沒有這個選項。甚至連Win11的默認右鍵菜單。都把刷新隱藏了。所以刷新到底刷了個啥啊？本期第27期E邊玩趣，逆向！給你答案！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">而對於我來說。我更傾向於保留刷新功能。其實這也是給人一種安全感。當你點刷新的時候。我能感覺到我的硬盤是在線的。我給大家舉一個例子就能get到我的感受了。就好比我叫了一個外賣。App顯示預計9點47分送達。結果已經9點46了。我肚子已經有點餓了。而手機頂部卻一直顯示“商家備貨中”。我會懷疑是不是信息沒有更新啊。我就會主動打開外賣軟件進去查看最新外賣狀態。哪怕app裡面狀態確實和外顯一致。那我也會獲得安全感。這其實就是和我鼠標右鍵點了“刷新”一樣的邏輯。而Mac的Finder給我的感受就是。他不允許我主動刷新外賣狀態。只能被動的等待手機頂部信息更新。如果真的出bug了。那你就一直停留在“商家備貨中”這個狀態。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">大家能理解我的感受了嗎。刷新的作用其實就在這裡。所以，“刷新”顧名思義。就是把當前界面展示的內容更新到最新。說到刷新，我還要分兩種情況。一個是線上內容比如瀏覽器網頁。另一個是本地內容，比如文件管理器。桌面。如果是瀏覽器。那麼刷新功能是必須要的。因為這是線上內容。大多數網頁並不會主動更新最新內容。特別是當網站程序發生更改的時候。有時候不僅要刷新才能生效。甚至還要清緩存。因為大多數網頁本質是將網頁文件（包括前端邏輯程序）下載到你的瀏覽器本地緩存。你看到的實際上只是你訪問的那一刻網頁的副本。但大家不知道的是。如果是電腦本地的文件資源管理器、桌面。理論上是可以不需要手動刷新功能的。那麼為什麼大多數網頁做不到而本地文件資源管理器可以做到自動刷新呢。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">因為如果本地文件發生了更改。系統是會自動更新內容的。我們把時間播到30年前。讓我們看看最早引入刷新的Win95。Win95的右鍵其實是沒有刷新選項的。刷新是藏在views（視圖）裡面的。我們做一個實驗。我們編寫一個命令行程序。目的就是脫離圖形界面去創建一個文件。我們執行之後發現，無論是桌面。還是文件夾。最古老的Win95都能自動將創建好的文件顯示出來。並不需要我們手動點擊刷新。他是會自動顯示出來的。事實上，本地文件資源管理器。它默認是有一個監聽機制的。就比如我剛才用命令行創建了一個文件。文件系統會廣播一個消息。告訴操作系統。有一個文件創建了。系統組件會監聽各種系統廣播消息。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">跟他沒關係的他會無視。他們只會關注跟自己有關係的廣播消息。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_182.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">比如負責展示文件的文件資源管理器聽到了這個消息。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">他就會立即把這個已經創建的文件顯示出來。其實這就是經典的監聽者設計模式的原理。其實MacOS和Linux也是用到了同樣的原理。其實Linux下的文件管理器是有刷新的。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">由於Linux發行版眾多。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">有的比如Ubuntu。是F5快捷鍵會有刷新的功能。而樹莓派的系統則是View菜單下的Reload Filesystem。而唯獨MacOS的Finder。既沒有菜單選項。也沒有快捷鍵來執行刷新。看到這裡大家應該感受到了。刷新其實是一個兜底功能。因為監聽者模式必須要求所有的成員都要遵守規則。換句話說，所有的程序。都需要做到，我動了文件。那麼我必須把我的行為廣播出去。但是，凡事總是有萬一對吧。萬一總有那麼一個程序員偷懶。沒有把行為廣播出去。如果是創建新文件沒有廣播。那會導致文件被“隱身”。如果是刪除文件沒有廣播。則會出現“僵屍文件”。正因為Windows和Linux的開放性。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">這種信息沒廣播出去的情況肯定是會有的。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">所以才需要刷新這個功能做兜底。而Mac下相對比較封閉。整個系統高度統一。所以蘋果相對比較有“信心”。他們自認為不會出現程序員偷懶的現象。就不需要刷新了。呃呃，我說到程序員偷懶。總感覺有一種微妙的違和感。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_251.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">其實我認為，即便是Mac。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">即便程序員都沒偷懶。代碼寫的天衣無縫。也不可能保證一定會不丟消息。就比如文件共享。Mac兼容了很多文件共享協議。當你訪問共享文件夾的時候。文件共享協議會發送文件狀態變化的廣播消息。但是受到網絡的影響。依然有可能因為網絡不穩定。導致文件信息不同步的情況。我就現場演示給你看。就比如Mac連接samba服務。我就斷網。然後在服務器上創建一個文件。再連接網絡。Mac這邊Finder就沒有顯示出這個文件。如果沒有刷新功能，那只能乾瞪眼。當然你可以訪問一個別的文件夾。再退出來。也可以起到刷新的作用。就是比較多此一舉了。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">其實現代操作系統。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">刷新不僅僅是刷新文件。接下來讓我背後的男人開“天眼”，逆向一下刷新。其實win98的桌面刷新。就額外調用了一個msjava的動態庫。不知道大家還記不記得。那時候是可以把網頁設置為桌面背景的。這個msjava並不是我們熟知的sun公司的java。而是網頁用的javascript。所以這個刷新不止是刷新了文件。還刷新了桌面網頁。而現代的win11的刷新。所執行的內容就更多了。涉及到調用的函數多大上百個。我們來看看有啥。有的是資源管理器界面的刷新。文件圖標的刷新，托盤圖標的刷新。通知區域的刷新。甚至還有windows激活相關的邏輯。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_320.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我是覺得，當邏輯越加越多。信息刷洗你不可控就更加明顯。所以某種程度。windows更需要刷新來兜底。但是如果如Mac一般沒有刷新。你會沒有安全感嗎？不知道大家對刷新這個功能怎麼看呢。評論區裡告訴我吧！這就是本期視頻全部內容。對逆向感興趣。可以關注我和邊亮哦！</p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=heBmfQspi_s">https://www.youtube.com/watch?v=heBmfQspi_s</a></p><p>不知道大家是否知道，这个“刷新”功能到底是做什么用的？为什么Mac和大部分Linux发行版的图形化界面，都没有这个选项，甚至连Win11文件资源管理器的默认右键菜单，都把刷新隐藏了。所以刷新到底刷了个啥啊？</p><p></p><p>BGM:</p><p>Bustling Afternoon in Mondstadt</p><p>Greenpath</p><p>Pokemon Scarlet and Violet BGM Cover Medley</p><p></p><p>欢迎订阅👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p>Welcome to subscribe👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p></p><p>喜欢我的视频，请按赞、分享哦~</p><p>Like my video welcome hit like and share it~</p><p></p><p>开启小铃铛第一时间接收最新资讯~</p><p>🔔Light up the little bell and receive the latest news first</p>]]>
      </itunes:summary>
      <description>
        <![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/heBmfQspi_s/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=heBmfQspi_s">https://www.youtube.com/watch?v=heBmfQspi_s</a></p><h1>值得閱讀的理由</h1> <ul><li>深入淺出地解釋了Windows右鍵「刷新」功能的歷史、原理及實際用途，並探討了其在不同操作系統中的設計哲學差異。</li><li>透過生動的比喻與實際案例（如外賣App、Win95實驗、Mac共享文件），讓讀者更容易理解抽象的計算機系統運作機制，如監聽者設計模式。</li><li>不僅解答了「刷新到底刷了個啥」的疑問，更揭示了現代操作系統中刷新功能背後遠超想像的複雜性與其作為「兜底」機制的重要性。</li></ul> <hr /> <h1>摘要</h1> <p>這段影片的作者探討了Windows操作系統中一個看似簡單卻引人深思的功能——「<strong>刷新</strong>」。他觀察到許多使用者，特別是資深用戶，在剛開機時習慣點擊右鍵刷新，以此判斷電腦是否「<strong>就緒</strong>」。然而，這個功能在Mac和大部分Linux發行版中卻沒有，甚至在Win11中被隱藏起來，引發了「刷新到底刷了個啥」的疑問。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_88.jpg" /></p> <h2>作者對「刷新」的情感與安全感</h2> <p>對於作者而言，「刷新」功能帶來一種<strong>安全感</strong>，讓他感覺到硬碟是「在線」的。他以檢查外賣訂單狀態為例，說明主動刷新能消除資訊延遲的不確定性，即使結果不變，也能獲得安心。這與Mac的Finder形成對比，後者不允許用戶主動刷新，只能被動等待系統更新，這讓作者感到若遇到Bug時無從確認。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_160.jpg" /></p> <h2>刷新功能的兩種情境：線上與本地</h2> <p>作者指出，「刷新」顧名思義就是將界面內容更新到最新。他將刷新分為兩種情境：線上內容如<strong>瀏覽器網頁</strong>，和本地內容如<strong>文件資源管理器或桌面</strong>。瀏覽器刷新是必需的，因為大多數網頁不會主動更新，有時甚至需<strong>清緩存</strong>才能生效。然而，對於電腦本地的文件資源管理器或桌面，理論上是不需要手動刷新功能的。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_235.jpg" /></p> <h2>操作系統的自動更新機制與Win95的案例</h2> <p>那麼，為什麼本地文件資源管理器可以做到自動刷新呢？作者解釋，當本地文件發生更改時，系統會自動更新內容。他追溯到Win95，透過實驗證明即使是最早的Win95，在命令行創建文件後，桌面或文件夾也能<strong>自動顯示</strong>新文件，而無需手動刷新。這是因為文件資源管理器預設有一個<strong>監聽機制</strong>。當文件系統廣播文件創建的消息時，系統組件會監聽這些消息，負責展示文件的組件便會立即更新顯示。這正是經典的「<strong>監聽者設計模式</strong>」原理，MacOS和Linux也採用了同樣的原理。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_6.jpg" /></p> <h2>刷新功能存在的真正原因：作為「兜底」</h2> <p>作者進一步指出，刷新其實是一個<strong>兜底功能</strong>。雖然監聽者模式要求所有程序在操作文件後都必須廣播其行為，但由於Windows和Linux的<strong>開放性</strong>，總有可能出現程序員「偷懶」或程序錯誤，導致信息未被廣播出去。例如，創建新文件卻沒有廣播可能導致文件「隱身」，刪除文件卻沒有廣播則會出現「殭屍文件」。正因如此，Windows和Linux才需要刷新功能來應對這些可能發生的<strong>不一致情況</strong>。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_7.jpg" /></p> <h2>Mac為何缺乏刷新選項？</h2> <p>相對地，Mac系統因其相對<strong>封閉</strong>且高度統一的特性，蘋果公司對其系統有較高「信心」，認為不會出現程序員遺漏廣播的情況，因此Finder中沒有提供手動刷新選項。然而，作者認為即使Mac的代碼再天衣無縫，也無法保證在所有情況下都不丟失消息，特別是在涉及<strong>文件共享</strong>時。他演示了Mac連接Samba服務器時，若在斷網狀態下於服務器端創建文件，Mac在重新連網後並不會顯示該文件，這突顯了缺乏刷新功能時可能導致的<strong>信息不同步</strong>問題。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_9.jpg" /></p> <h2>刷新在現代系統中的複雜性</h2> <p>作者透過「逆向」技術揭示了現代操作系統中刷新功能的複雜性。他指出，Win98的桌面刷新不僅更新文件，還額外調用了處理<strong>桌面網頁</strong>的msjava動態庫。而Win11的刷新所執行的內容則更加龐大，涉及多達上百個函數，包括資源管理器界面刷新、文件圖標刷新、托盤圖標刷新、通知區域刷新，甚至還有Windows<strong>激活相關</strong>的邏輯。作者總結道，當系統邏輯越加越多，信息不可控的情況就越明顯，因此在某種程度上，Windows更需要刷新來作為<strong>最終的保障</strong>。</p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">當你在桌面或任意文件夾裡點擊鼠標右鍵彈出菜單的時候。你是否還記得有一個讓你印象深刻的選項---刷新。如果剛開機進桌面。你有點右鍵刷新的習慣。那說明你應該是奔四的人了。我記得當年電腦配置都很差。特別是使用xp的時候。開機剛進桌面後電腦可能還是比較卡的。如果貿然直接打開一個大型程序。可能會讓電腦更卡。而在桌面點右鍵刷新，如果馬上響應。那麼說明電腦已經“就緒”了。但不知道大家是否知道。這個“刷新”功能到底是做什麼用的？</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">為什麼Mac和大部分Linux發行版的圖形化界面。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">都沒有這個選項。甚至連Win11的默認右鍵菜單。都把刷新隱藏了。所以刷新到底刷了個啥啊？本期第27期E邊玩趣，逆向！給你答案！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">而對於我來說。我更傾向於保留刷新功能。其實這也是給人一種安全感。當你點刷新的時候。我能感覺到我的硬盤是在線的。我給大家舉一個例子就能get到我的感受了。就好比我叫了一個外賣。App顯示預計9點47分送達。結果已經9點46了。我肚子已經有點餓了。而手機頂部卻一直顯示“商家備貨中”。我會懷疑是不是信息沒有更新啊。我就會主動打開外賣軟件進去查看最新外賣狀態。哪怕app裡面狀態確實和外顯一致。那我也會獲得安全感。這其實就是和我鼠標右鍵點了“刷新”一樣的邏輯。而Mac的Finder給我的感受就是。他不允許我主動刷新外賣狀態。只能被動的等待手機頂部信息更新。如果真的出bug了。那你就一直停留在“商家備貨中”這個狀態。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">大家能理解我的感受了嗎。刷新的作用其實就在這裡。所以，“刷新”顧名思義。就是把當前界面展示的內容更新到最新。說到刷新，我還要分兩種情況。一個是線上內容比如瀏覽器網頁。另一個是本地內容，比如文件管理器。桌面。如果是瀏覽器。那麼刷新功能是必須要的。因為這是線上內容。大多數網頁並不會主動更新最新內容。特別是當網站程序發生更改的時候。有時候不僅要刷新才能生效。甚至還要清緩存。因為大多數網頁本質是將網頁文件（包括前端邏輯程序）下載到你的瀏覽器本地緩存。你看到的實際上只是你訪問的那一刻網頁的副本。但大家不知道的是。如果是電腦本地的文件資源管理器、桌面。理論上是可以不需要手動刷新功能的。那麼為什麼大多數網頁做不到而本地文件資源管理器可以做到自動刷新呢。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">因為如果本地文件發生了更改。系統是會自動更新內容的。我們把時間播到30年前。讓我們看看最早引入刷新的Win95。Win95的右鍵其實是沒有刷新選項的。刷新是藏在views（視圖）裡面的。我們做一個實驗。我們編寫一個命令行程序。目的就是脫離圖形界面去創建一個文件。我們執行之後發現，無論是桌面。還是文件夾。最古老的Win95都能自動將創建好的文件顯示出來。並不需要我們手動點擊刷新。他是會自動顯示出來的。事實上，本地文件資源管理器。它默認是有一個監聽機制的。就比如我剛才用命令行創建了一個文件。文件系統會廣播一個消息。告訴操作系統。有一個文件創建了。系統組件會監聽各種系統廣播消息。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">跟他沒關係的他會無視。他們只會關注跟自己有關係的廣播消息。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_182.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">比如負責展示文件的文件資源管理器聽到了這個消息。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">他就會立即把這個已經創建的文件顯示出來。其實這就是經典的監聽者設計模式的原理。其實MacOS和Linux也是用到了同樣的原理。其實Linux下的文件管理器是有刷新的。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">由於Linux發行版眾多。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">有的比如Ubuntu。是F5快捷鍵會有刷新的功能。而樹莓派的系統則是View菜單下的Reload Filesystem。而唯獨MacOS的Finder。既沒有菜單選項。也沒有快捷鍵來執行刷新。看到這裡大家應該感受到了。刷新其實是一個兜底功能。因為監聽者模式必須要求所有的成員都要遵守規則。換句話說，所有的程序。都需要做到，我動了文件。那麼我必須把我的行為廣播出去。但是，凡事總是有萬一對吧。萬一總有那麼一個程序員偷懶。沒有把行為廣播出去。如果是創建新文件沒有廣播。那會導致文件被“隱身”。如果是刪除文件沒有廣播。則會出現“僵屍文件”。正因為Windows和Linux的開放性。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">這種信息沒廣播出去的情況肯定是會有的。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">所以才需要刷新這個功能做兜底。而Mac下相對比較封閉。整個系統高度統一。所以蘋果相對比較有“信心”。他們自認為不會出現程序員偷懶的現象。就不需要刷新了。呃呃，我說到程序員偷懶。總感覺有一種微妙的違和感。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_251.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">其實我認為，即便是Mac。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">即便程序員都沒偷懶。代碼寫的天衣無縫。也不可能保證一定會不丟消息。就比如文件共享。Mac兼容了很多文件共享協議。當你訪問共享文件夾的時候。文件共享協議會發送文件狀態變化的廣播消息。但是受到網絡的影響。依然有可能因為網絡不穩定。導致文件信息不同步的情況。我就現場演示給你看。就比如Mac連接samba服務。我就斷網。然後在服務器上創建一個文件。再連接網絡。Mac這邊Finder就沒有顯示出這個文件。如果沒有刷新功能，那只能乾瞪眼。當然你可以訪問一個別的文件夾。再退出來。也可以起到刷新的作用。就是比較多此一舉了。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">其實現代操作系統。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">刷新不僅僅是刷新文件。接下來讓我背後的男人開“天眼”，逆向一下刷新。其實win98的桌面刷新。就額外調用了一個msjava的動態庫。不知道大家還記不記得。那時候是可以把網頁設置為桌面背景的。這個msjava並不是我們熟知的sun公司的java。而是網頁用的javascript。所以這個刷新不止是刷新了文件。還刷新了桌面網頁。而現代的win11的刷新。所執行的內容就更多了。涉及到調用的函數多大上百個。我們來看看有啥。有的是資源管理器界面的刷新。文件圖標的刷新，托盤圖標的刷新。通知區域的刷新。甚至還有windows激活相關的邏輯。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_320.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我是覺得，當邏輯越加越多。信息刷洗你不可控就更加明顯。所以某種程度。windows更需要刷新來兜底。但是如果如Mac一般沒有刷新。你會沒有安全感嗎？不知道大家對刷新這個功能怎麼看呢。評論區裡告訴我吧！這就是本期視頻全部內容。對逆向感興趣。可以關注我和邊亮哦！</p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=heBmfQspi_s">https://www.youtube.com/watch?v=heBmfQspi_s</a></p><p>不知道大家是否知道，这个“刷新”功能到底是做什么用的？为什么Mac和大部分Linux发行版的图形化界面，都没有这个选项，甚至连Win11文件资源管理器的默认右键菜单，都把刷新隐藏了。所以刷新到底刷了个啥啊？</p><p></p><p>BGM:</p><p>Bustling Afternoon in Mondstadt</p><p>Greenpath</p><p>Pokemon Scarlet and Violet BGM Cover Medley</p><p></p><p>欢迎订阅👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p>Welcome to subscribe👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p></p><p>喜欢我的视频，请按赞、分享哦~</p><p>Like my video welcome hit like and share it~</p><p></p><p>开启小铃铛第一时间接收最新资讯~</p><p>🔔Light up the little bell and receive the latest news first</p>]]>
      </description>
      <content:encoded><![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/heBmfQspi_s/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=heBmfQspi_s">https://www.youtube.com/watch?v=heBmfQspi_s</a></p><h1>值得閱讀的理由</h1> <ul><li>深入淺出地解釋了Windows右鍵「刷新」功能的歷史、原理及實際用途，並探討了其在不同操作系統中的設計哲學差異。</li><li>透過生動的比喻與實際案例（如外賣App、Win95實驗、Mac共享文件），讓讀者更容易理解抽象的計算機系統運作機制，如監聽者設計模式。</li><li>不僅解答了「刷新到底刷了個啥」的疑問，更揭示了現代操作系統中刷新功能背後遠超想像的複雜性與其作為「兜底」機制的重要性。</li></ul> <hr /> <h1>摘要</h1> <p>這段影片的作者探討了Windows操作系統中一個看似簡單卻引人深思的功能——「<strong>刷新</strong>」。他觀察到許多使用者，特別是資深用戶，在剛開機時習慣點擊右鍵刷新，以此判斷電腦是否「<strong>就緒</strong>」。然而，這個功能在Mac和大部分Linux發行版中卻沒有，甚至在Win11中被隱藏起來，引發了「刷新到底刷了個啥」的疑問。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_88.jpg" /></p> <h2>作者對「刷新」的情感與安全感</h2> <p>對於作者而言，「刷新」功能帶來一種<strong>安全感</strong>，讓他感覺到硬碟是「在線」的。他以檢查外賣訂單狀態為例，說明主動刷新能消除資訊延遲的不確定性，即使結果不變，也能獲得安心。這與Mac的Finder形成對比，後者不允許用戶主動刷新，只能被動等待系統更新，這讓作者感到若遇到Bug時無從確認。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_160.jpg" /></p> <h2>刷新功能的兩種情境：線上與本地</h2> <p>作者指出，「刷新」顧名思義就是將界面內容更新到最新。他將刷新分為兩種情境：線上內容如<strong>瀏覽器網頁</strong>，和本地內容如<strong>文件資源管理器或桌面</strong>。瀏覽器刷新是必需的，因為大多數網頁不會主動更新，有時甚至需<strong>清緩存</strong>才能生效。然而，對於電腦本地的文件資源管理器或桌面，理論上是不需要手動刷新功能的。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_235.jpg" /></p> <h2>操作系統的自動更新機制與Win95的案例</h2> <p>那麼，為什麼本地文件資源管理器可以做到自動刷新呢？作者解釋，當本地文件發生更改時，系統會自動更新內容。他追溯到Win95，透過實驗證明即使是最早的Win95，在命令行創建文件後，桌面或文件夾也能<strong>自動顯示</strong>新文件，而無需手動刷新。這是因為文件資源管理器預設有一個<strong>監聽機制</strong>。當文件系統廣播文件創建的消息時，系統組件會監聽這些消息，負責展示文件的組件便會立即更新顯示。這正是經典的「<strong>監聽者設計模式</strong>」原理，MacOS和Linux也採用了同樣的原理。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_6.jpg" /></p> <h2>刷新功能存在的真正原因：作為「兜底」</h2> <p>作者進一步指出，刷新其實是一個<strong>兜底功能</strong>。雖然監聽者模式要求所有程序在操作文件後都必須廣播其行為，但由於Windows和Linux的<strong>開放性</strong>，總有可能出現程序員「偷懶」或程序錯誤，導致信息未被廣播出去。例如，創建新文件卻沒有廣播可能導致文件「隱身」，刪除文件卻沒有廣播則會出現「殭屍文件」。正因如此，Windows和Linux才需要刷新功能來應對這些可能發生的<strong>不一致情況</strong>。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_7.jpg" /></p> <h2>Mac為何缺乏刷新選項？</h2> <p>相對地，Mac系統因其相對<strong>封閉</strong>且高度統一的特性，蘋果公司對其系統有較高「信心」，認為不會出現程序員遺漏廣播的情況，因此Finder中沒有提供手動刷新選項。然而，作者認為即使Mac的代碼再天衣無縫，也無法保證在所有情況下都不丟失消息，特別是在涉及<strong>文件共享</strong>時。他演示了Mac連接Samba服務器時，若在斷網狀態下於服務器端創建文件，Mac在重新連網後並不會顯示該文件，這突顯了缺乏刷新功能時可能導致的<strong>信息不同步</strong>問題。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_9.jpg" /></p> <h2>刷新在現代系統中的複雜性</h2> <p>作者透過「逆向」技術揭示了現代操作系統中刷新功能的複雜性。他指出，Win98的桌面刷新不僅更新文件，還額外調用了處理<strong>桌面網頁</strong>的msjava動態庫。而Win11的刷新所執行的內容則更加龐大，涉及多達上百個函數，包括資源管理器界面刷新、文件圖標刷新、托盤圖標刷新、通知區域刷新，甚至還有Windows<strong>激活相關</strong>的邏輯。作者總結道，當系統邏輯越加越多，信息不可控的情況就越明顯，因此在某種程度上，Windows更需要刷新來作為<strong>最終的保障</strong>。</p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">當你在桌面或任意文件夾裡點擊鼠標右鍵彈出菜單的時候。你是否還記得有一個讓你印象深刻的選項---刷新。如果剛開機進桌面。你有點右鍵刷新的習慣。那說明你應該是奔四的人了。我記得當年電腦配置都很差。特別是使用xp的時候。開機剛進桌面後電腦可能還是比較卡的。如果貿然直接打開一個大型程序。可能會讓電腦更卡。而在桌面點右鍵刷新，如果馬上響應。那麼說明電腦已經“就緒”了。但不知道大家是否知道。這個“刷新”功能到底是做什麼用的？</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">為什麼Mac和大部分Linux發行版的圖形化界面。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">都沒有這個選項。甚至連Win11的默認右鍵菜單。都把刷新隱藏了。所以刷新到底刷了個啥啊？本期第27期E邊玩趣，逆向！給你答案！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">而對於我來說。我更傾向於保留刷新功能。其實這也是給人一種安全感。當你點刷新的時候。我能感覺到我的硬盤是在線的。我給大家舉一個例子就能get到我的感受了。就好比我叫了一個外賣。App顯示預計9點47分送達。結果已經9點46了。我肚子已經有點餓了。而手機頂部卻一直顯示“商家備貨中”。我會懷疑是不是信息沒有更新啊。我就會主動打開外賣軟件進去查看最新外賣狀態。哪怕app裡面狀態確實和外顯一致。那我也會獲得安全感。這其實就是和我鼠標右鍵點了“刷新”一樣的邏輯。而Mac的Finder給我的感受就是。他不允許我主動刷新外賣狀態。只能被動的等待手機頂部信息更新。如果真的出bug了。那你就一直停留在“商家備貨中”這個狀態。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">大家能理解我的感受了嗎。刷新的作用其實就在這裡。所以，“刷新”顧名思義。就是把當前界面展示的內容更新到最新。說到刷新，我還要分兩種情況。一個是線上內容比如瀏覽器網頁。另一個是本地內容，比如文件管理器。桌面。如果是瀏覽器。那麼刷新功能是必須要的。因為這是線上內容。大多數網頁並不會主動更新最新內容。特別是當網站程序發生更改的時候。有時候不僅要刷新才能生效。甚至還要清緩存。因為大多數網頁本質是將網頁文件（包括前端邏輯程序）下載到你的瀏覽器本地緩存。你看到的實際上只是你訪問的那一刻網頁的副本。但大家不知道的是。如果是電腦本地的文件資源管理器、桌面。理論上是可以不需要手動刷新功能的。那麼為什麼大多數網頁做不到而本地文件資源管理器可以做到自動刷新呢。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">因為如果本地文件發生了更改。系統是會自動更新內容的。我們把時間播到30年前。讓我們看看最早引入刷新的Win95。Win95的右鍵其實是沒有刷新選項的。刷新是藏在views（視圖）裡面的。我們做一個實驗。我們編寫一個命令行程序。目的就是脫離圖形界面去創建一個文件。我們執行之後發現，無論是桌面。還是文件夾。最古老的Win95都能自動將創建好的文件顯示出來。並不需要我們手動點擊刷新。他是會自動顯示出來的。事實上，本地文件資源管理器。它默認是有一個監聽機制的。就比如我剛才用命令行創建了一個文件。文件系統會廣播一個消息。告訴操作系統。有一個文件創建了。系統組件會監聽各種系統廣播消息。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">跟他沒關係的他會無視。他們只會關注跟自己有關係的廣播消息。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_182.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">比如負責展示文件的文件資源管理器聽到了這個消息。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">他就會立即把這個已經創建的文件顯示出來。其實這就是經典的監聽者設計模式的原理。其實MacOS和Linux也是用到了同樣的原理。其實Linux下的文件管理器是有刷新的。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">由於Linux發行版眾多。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">有的比如Ubuntu。是F5快捷鍵會有刷新的功能。而樹莓派的系統則是View菜單下的Reload Filesystem。而唯獨MacOS的Finder。既沒有菜單選項。也沒有快捷鍵來執行刷新。看到這裡大家應該感受到了。刷新其實是一個兜底功能。因為監聽者模式必須要求所有的成員都要遵守規則。換句話說，所有的程序。都需要做到，我動了文件。那麼我必須把我的行為廣播出去。但是，凡事總是有萬一對吧。萬一總有那麼一個程序員偷懶。沒有把行為廣播出去。如果是創建新文件沒有廣播。那會導致文件被“隱身”。如果是刪除文件沒有廣播。則會出現“僵屍文件”。正因為Windows和Linux的開放性。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">這種信息沒廣播出去的情況肯定是會有的。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">所以才需要刷新這個功能做兜底。而Mac下相對比較封閉。整個系統高度統一。所以蘋果相對比較有“信心”。他們自認為不會出現程序員偷懶的現象。就不需要刷新了。呃呃，我說到程序員偷懶。總感覺有一種微妙的違和感。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_251.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">其實我認為，即便是Mac。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">即便程序員都沒偷懶。代碼寫的天衣無縫。也不可能保證一定會不丟消息。就比如文件共享。Mac兼容了很多文件共享協議。當你訪問共享文件夾的時候。文件共享協議會發送文件狀態變化的廣播消息。但是受到網絡的影響。依然有可能因為網絡不穩定。導致文件信息不同步的情況。我就現場演示給你看。就比如Mac連接samba服務。我就斷網。然後在服務器上創建一個文件。再連接網絡。Mac這邊Finder就沒有顯示出這個文件。如果沒有刷新功能，那只能乾瞪眼。當然你可以訪問一個別的文件夾。再退出來。也可以起到刷新的作用。就是比較多此一舉了。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">其實現代操作系統。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">刷新不僅僅是刷新文件。接下來讓我背後的男人開“天眼”，逆向一下刷新。其實win98的桌面刷新。就額外調用了一個msjava的動態庫。不知道大家還記不記得。那時候是可以把網頁設置為桌面背景的。這個msjava並不是我們熟知的sun公司的java。而是網頁用的javascript。所以這個刷新不止是刷新了文件。還刷新了桌面網頁。而現代的win11的刷新。所執行的內容就更多了。涉及到調用的函數多大上百個。我們來看看有啥。有的是資源管理器界面的刷新。文件圖標的刷新，托盤圖標的刷新。通知區域的刷新。甚至還有windows激活相關的邏輯。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heBmfQspi_s_320.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我是覺得，當邏輯越加越多。信息刷洗你不可控就更加明顯。所以某種程度。windows更需要刷新來兜底。但是如果如Mac一般沒有刷新。你會沒有安全感嗎？不知道大家對刷新這個功能怎麼看呢。評論區裡告訴我吧！這就是本期視頻全部內容。對逆向感興趣。可以關注我和邊亮哦！</p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=heBmfQspi_s">https://www.youtube.com/watch?v=heBmfQspi_s</a></p><p>不知道大家是否知道，这个“刷新”功能到底是做什么用的？为什么Mac和大部分Linux发行版的图形化界面，都没有这个选项，甚至连Win11文件资源管理器的默认右键菜单，都把刷新隐藏了。所以刷新到底刷了个啥啊？</p><p></p><p>BGM:</p><p>Bustling Afternoon in Mondstadt</p><p>Greenpath</p><p>Pokemon Scarlet and Violet BGM Cover Medley</p><p></p><p>欢迎订阅👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p>Welcome to subscribe👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p></p><p>喜欢我的视频，请按赞、分享哦~</p><p>Like my video welcome hit like and share it~</p><p></p><p>开启小铃铛第一时间接收最新资讯~</p><p>🔔Light up the little bell and receive the latest news first</p>]]></content:encoded>
      <itunes:image href="https://i.ytimg.com/vi/heBmfQspi_s/hqdefault.jpg"/>
      <pubDate>2025-09-09T08:22:17.000Z</pubDate>
    </item><item>
      <title><![CDATA[Win11 补丁炸硬盘？我分析了一个真实案例！ | 补丁 | KB5063878 | 微软 | BUG | 硬盘 | 边亮 | 索引]]></title>
      <link>https://www.youtube.com/watch?v=YjHdZxYBakI</link>
      <itunes:title><![CDATA[Win11 补丁炸硬盘？我分析了一个真实案例！ | 补丁 | KB5063878 | 微软 | BUG | 硬盘 | 边亮 | 索引]]></itunes:title>
      <itunes:author><![CDATA[epcdiy]]></itunes:author>
      <itunes:summary>
        <![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/YjHdZxYBakI/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=YjHdZxYBakI">https://www.youtube.com/watch?v=YjHdZxYBakI</a></p><h1>值得閱讀的理由</h1> <ul> <li>揭露並詳細分析了廣為流傳的「Windows 更新導致硬碟損壞」迷思，提供基於實際測試與調查的結論。</li> <li>展示了科技內容創作者如何透過嚴謹的實驗、粉絲協助及專業工具，逐步排查複雜的軟硬體問題，釐清真相。</li> <li>提醒讀者注意Windows系統中不易察覺的「索引」功能設定陷阱，並提出優化或替代方案，避免不必要的硬碟損耗。</li> </ul> <hr /> <h1>摘要</h1> <p>近期，一位日本用戶爆料稱特定的Windows更新會導致硬碟數據丟失甚至損毀，引發廣泛關注。<strong>作者</strong>在收到這一消息後，立即發動了所有能動用的硬碟，甚至購買了網傳的對應型號硬碟，並邀請專業團隊協助測試，但始終無法穩定復現所謂的「炸盤」問題。這個問題的複雜性遠超以往，導致<strong>作者</strong>難以與僅憑臆測的行銷號競爭速度，查找真相的過程極其艱難。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/YjHdZxYBakI_95.jpg" /></p> <h2>關鍵線索：來自粉絲的特殊案例</h2> <p>在<strong>作者</strong>發佈動態尋求線索後，一位名為「肥宅快樂200斤」的裝機博主粉絲提供了寶貴的資訊。他的症狀與網路傳聞略有不同，他發現安裝補丁後硬碟壽命顯著下降，表現為<strong>大量數據寫入</strong>，據他自稱寫入了上百GB。<strong>作者</strong>隨即希望他能將硬碟直接寄過來進行檢測，且不要動任何數據。這一步對普通用戶來說極具挑戰性，因為涉及隱私，需要高度信任。幸運的是，這位粉絲擁有多個硬碟，他選擇克隆硬碟後將副本寄給<strong>作者</strong>，使得調查得以繼續。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/YjHdZxYBakI_180.jpg" /></p> <h2>真相大白：元兇竟是Windows索引功能</h2> <p>當<strong>作者</strong>將粉絲的硬碟接入電腦後，立即發現了異常：硬碟正在<strong>瘋狂寫入索引數據</strong>。根據常識，索引功能主要應為讀取操作，如此大量的寫入令人費解。<strong>作者</strong>與<strong>邊亮</strong>一同使用專業工具排查系統進程，驚訝地發現系統索引的數據庫文件已接近4GB，並仍在肉眼可見地持續增長。進一步檢查後發現，這位粉絲竟然將<strong>整個硬碟都加入了索引範圍</strong>，這並非Windows的預設設定。詢問粉絲後得知，他曾因文件搜索失效而上網搜尋教程，在操作過程中可能錯誤地將整個硬碟設定為索引對象。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/YjHdZxYBakI_285.jpg" /></p> <h2>時間線梳理與技術原理揭秘</h2> <p><strong>作者</strong>仔細梳理了時間線：粉絲於8月15日安裝了網傳的「炸盤補丁」3878；9月3日發現本地搜索異常並搜尋教程；同日22點47分25秒，他將整個硬碟設為索引範圍；次日（9月4日）便發布動態抱怨硬碟大量寫入並健康度下降。最終，硬碟於9月5日送達<strong>作者</strong>處，索引問題被定位。<strong>作者</strong>強調，不應指責這位粉絲，因為在行銷號鋪天蓋地、非技術背景的人很容易被誤導。</p> <p><strong>作者</strong>解釋了為何索引會導致大量寫入：由於粉絲將整個硬碟（包括大量如微信聊天記錄這類包含大量小文件的數據）都納入索引，導致索引不堪重負。Windows本身的索引優化就相對較差。儘管索引看似是讀取，但其<strong>數據庫文件</strong>在插入、修改數據時，內部會觸發複雜的寫入操作。<strong>作者</strong>舉例說明，如修改一個數據，系統可能創建新格子並作廢舊格子，隨後觸發空間整理，將後續數據前移，這會導致實際磁盤寫入量遠大於數據本身的體積。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/YjHdZxYBakI_9.jpg" /></p> <h2>反人類的UI設計與最終建議</h2> <p>此外，<strong>作者</strong>也批評了Windows索引設置中<strong>反人類的UI設計</strong>，如同控制面板與設置一樣，索引也有兩個完全不同的設置界面。更糟糕的是，某個界面上D盤可能顯示未選中，但點擊進入後卻發現其子文件夾已被勾選，極具誤導性。因此，<strong>作者</strong>建議用戶直接禁用Windows內建的索引功能，轉而使用第三方搜索軟件，例如實用高效的<strong>Everything</strong>。</p> <p>最後，<strong>作者</strong>總結了幾個觀點：</p> <ol> <li>關於「補丁是否真的會摧毀硬碟」，<strong>作者</strong>無法100%肯定，但根據微軟官方和硬碟主控芯片廠商的說法，以及<strong>作者</strong>的個人判斷，由該補丁直接導致硬碟損壞的<strong>概率極低</strong>。</li> <li>硬碟問題的原因<strong>千奇百怪</strong>，很有可能恰好發生在打補丁之後，這很容易讓人產生<strong>歸因謬誤</strong>，且排查硬碟損壞原因的難度極大。國內行銷號常常製造恐慌以賺取流量。</li> <li>Windows一些<strong>反人類的設置界面</strong>確實需要優化，例如「裡面勾選了，外面卻顯示沒勾選」的災難級UI設計。</li> </ol> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">自打一位日本人爆料說windows更新會讓你硬盤數據丟失甚至損毀。但是我按照日本人的做法。我發動了我能動用的所有硬盤。包括購買網傳對應型號硬盤。我一片，邊亮一片，一起測試。包括請差評硬件部幫忙測試。都無法穩定復現！後面我也發動態希望遇到問題的粉絲也能提供線索。發動粉絲其實很難的。因為這個問題要找到原因步驟非常繁瑣。遠比我之前海綿寶寶導致崩潰難多了。所以真沒辦法和營銷號拼速度。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不過好在有一名粉肥宅快樂200斤。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/YjHdZxYBakI_59.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">他是一名裝機博主，他也遇到了問題。不過他的症狀有點不一樣。他自稱是更新補丁後。硬盤壽命下降，表現為大量數據寫入。他自稱寫入了上百G。於是我希望他能把硬盤直接寄給我。不要動任何數據。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">其實這一步就很勸退人了。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">畢竟硬盤裡有隱私數據。對方必須充分信任我。才願意把硬盤原封不動的寄給我。所以這也是這個補丁問題排查的困難之處。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">幸好他是一名裝機博主。手上硬盤夠多。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">他直接克隆了硬盤之後，寄給我了。要是普通人，別說寄給我，克隆硬盤。找替代硬盤，處處勸退。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">既然天時利地人和。我終於可以接近真相了！把他的硬盤插入我的電腦開機後。我發現一個明顯異常情況。索引瘋狂的寫入硬盤。按照我的固有觀念。索引不應該是讀取嗎？</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">為什麼寫入那麼大。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我和邊亮一起用專業工具排查系統進程。沒想到系統索引的數據庫文件已經被幹到接近4個G了！而且肉眼可見在不停增長！打開他的索引設置，我靠。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">他居然把整個硬盤全部加入索引了！默認設置是不可能把整個硬盤加入索引的！於是我問了這個粉絲。他說他是有一次發現文件搜索失效了。他就上網搜索教程。按照教程倒騰了下。可能就是在這類教程倒騰下。把整個硬盤設置進去了。我不確定他看了哪些教程。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/YjHdZxYBakI_130.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">但我從文件時間上看。他重建索引的時候。正好是他發帖抱怨補丁之前。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我們來梳理一下時間線。8月15日他安裝了網傳“炸盤補丁”3878。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">9月3日他發現本地搜索異常。遂上網搜索教程。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">同日 22點47分25秒。他把整個硬盤設為索引範圍。9月4日發布第一條動態。懷疑自己安裝補丁導致硬盤狂寫。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">同日再次發布多條動態。抱怨硬盤寫入異常掉健康。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">9月5日硬盤到達我這，定位索引問題。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">當然了。這裡大家不要去指責這位粉絲。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">在營銷號鋪天蓋地影響下。非技術背景的人。很容易被誤導。由於他把整個硬盤設置成索引範圍。尤其他的微信聊天記錄也在索引範圍內。大家也知道。微信聊天記錄本身就非常大。特別是小文件非常多。這就導致索引不堪重負。本身windows索引優化就很差。我之前做過視頻的。開了索引導致帶音頻的文件夾打開都卡卡的。他把整個硬盤加入索引。硬盤肯定很難受的。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/YjHdZxYBakI_190.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不過這裡還有一個問題。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">索引不應該都是讀嗎。其實不然。大家看到索引你數據庫文件了嗎。他的索引數據庫文件已經快4G了。雖然我不知道微軟索引數據庫的文件結構是怎麼設計的。在這麼大的數據庫文件中插入數據。不排除會導致數據庫文件內部大量數據寫入。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">數據庫文件並不是你寫入1M數據。磁盤就給你寫入1M的。我給大家舉個例子。比如你插入10條數據。占用了10個格子，分別序號0-9。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">如果你改了序號為2的數據格子。他可能會創建一個新的格子。編號為10。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">然後2號格子設置為作廢。隨著被作廢的格子越來越多。會觸發空間整理。系統會把3號以後的格子向前挪一個位置。這樣磁盤的寫入量就是3號-10號所有格子占用的空間數。這就是索引導致硬盤大量寫入的原理。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">當然實際會更複雜。我只是舉一個簡單例子來說明。這裡還要說一個索引噁心的地方。和控制面板與設置一樣。索引也有兩個完全不同的設置界面。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">比如這個界面。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">大家看D盤是不是沒選上。你可能以為D盤都沒有被索引是吧。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">你點開看看。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">居然有一個子文件夾是選中的。所以這個界面非常誤導人。所以我個人建議。直接禁用索引功能把。直接用第三方搜索軟件。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/YjHdZxYBakI_256.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">比如everything就很好用。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">這期視頻是臨時加更的。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我就沒做很精緻。我想表達幾個觀點。1、這個補丁是不是真的會摧毀硬盤。我沒辦法給出100%肯定。但至少微軟官方。以及硬盤主控芯片廠商都表示。無法復現。我個人判斷：。由這個補丁直接導致硬盤損壞。概率極低。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">2、硬盤出問題原因千奇百怪。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">很有可能恰好發生在打補丁之後。此時很容易讓人出現歸因謬誤。畢竟不是每個人都能通過專業工具去查找原因。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">而且查找硬盤損壞的原因。難度非常大。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">大家都感到恐慌。也得以於國內營銷號聳人聽聞。他們壓根不驗證也不測試。製造恐慌恰流量爽歪歪。3、windows一些反人類的設置界面真要優化一下了。我是不明白到底是什麼腦迴路。會出現裡面勾上了。外面卻顯示沒勾上這種災難級別的UI設計。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">好了，這期視頻就到這裡。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">想知道軟件不為人知的秘密。關注我和邊亮哦！</p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=YjHdZxYBakI">https://www.youtube.com/watch?v=YjHdZxYBakI</a></p><p>BGM:</p><p>Revali's Theme</p><p>Rito Village</p><p>Kass' Theme - Violin Marimba Cover (Zelda Breath of the Wild)</p><p>感谢@IssaraDuo 的音乐！</p><p></p><p>测试了无数硬盘，均无法稳定复现，终于有一位粉丝﻿@肥宅快乐200斤﻿ 遇到问题，同意把带系统的硬盘寄给我，我这次要帮他和大家找到真相！ </p><p></p><p>欢迎订阅👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p>Welcome to subscribe👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p></p><p>喜欢我的视频，请按赞、分享哦~</p><p>Like my video welcome hit like and share it~</p><p></p><p>开启小铃铛第一时间接收最新资讯~</p><p>🔔Light up the little bell and receive the latest news first</p>]]>
      </itunes:summary>
      <description>
        <![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/YjHdZxYBakI/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=YjHdZxYBakI">https://www.youtube.com/watch?v=YjHdZxYBakI</a></p><h1>值得閱讀的理由</h1> <ul> <li>揭露並詳細分析了廣為流傳的「Windows 更新導致硬碟損壞」迷思，提供基於實際測試與調查的結論。</li> <li>展示了科技內容創作者如何透過嚴謹的實驗、粉絲協助及專業工具，逐步排查複雜的軟硬體問題，釐清真相。</li> <li>提醒讀者注意Windows系統中不易察覺的「索引」功能設定陷阱，並提出優化或替代方案，避免不必要的硬碟損耗。</li> </ul> <hr /> <h1>摘要</h1> <p>近期，一位日本用戶爆料稱特定的Windows更新會導致硬碟數據丟失甚至損毀，引發廣泛關注。<strong>作者</strong>在收到這一消息後，立即發動了所有能動用的硬碟，甚至購買了網傳的對應型號硬碟，並邀請專業團隊協助測試，但始終無法穩定復現所謂的「炸盤」問題。這個問題的複雜性遠超以往，導致<strong>作者</strong>難以與僅憑臆測的行銷號競爭速度，查找真相的過程極其艱難。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/YjHdZxYBakI_95.jpg" /></p> <h2>關鍵線索：來自粉絲的特殊案例</h2> <p>在<strong>作者</strong>發佈動態尋求線索後，一位名為「肥宅快樂200斤」的裝機博主粉絲提供了寶貴的資訊。他的症狀與網路傳聞略有不同，他發現安裝補丁後硬碟壽命顯著下降，表現為<strong>大量數據寫入</strong>，據他自稱寫入了上百GB。<strong>作者</strong>隨即希望他能將硬碟直接寄過來進行檢測，且不要動任何數據。這一步對普通用戶來說極具挑戰性，因為涉及隱私，需要高度信任。幸運的是，這位粉絲擁有多個硬碟，他選擇克隆硬碟後將副本寄給<strong>作者</strong>，使得調查得以繼續。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/YjHdZxYBakI_180.jpg" /></p> <h2>真相大白：元兇竟是Windows索引功能</h2> <p>當<strong>作者</strong>將粉絲的硬碟接入電腦後，立即發現了異常：硬碟正在<strong>瘋狂寫入索引數據</strong>。根據常識，索引功能主要應為讀取操作，如此大量的寫入令人費解。<strong>作者</strong>與<strong>邊亮</strong>一同使用專業工具排查系統進程，驚訝地發現系統索引的數據庫文件已接近4GB，並仍在肉眼可見地持續增長。進一步檢查後發現，這位粉絲竟然將<strong>整個硬碟都加入了索引範圍</strong>，這並非Windows的預設設定。詢問粉絲後得知，他曾因文件搜索失效而上網搜尋教程，在操作過程中可能錯誤地將整個硬碟設定為索引對象。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/YjHdZxYBakI_285.jpg" /></p> <h2>時間線梳理與技術原理揭秘</h2> <p><strong>作者</strong>仔細梳理了時間線：粉絲於8月15日安裝了網傳的「炸盤補丁」3878；9月3日發現本地搜索異常並搜尋教程；同日22點47分25秒，他將整個硬碟設為索引範圍；次日（9月4日）便發布動態抱怨硬碟大量寫入並健康度下降。最終，硬碟於9月5日送達<strong>作者</strong>處，索引問題被定位。<strong>作者</strong>強調，不應指責這位粉絲，因為在行銷號鋪天蓋地、非技術背景的人很容易被誤導。</p> <p><strong>作者</strong>解釋了為何索引會導致大量寫入：由於粉絲將整個硬碟（包括大量如微信聊天記錄這類包含大量小文件的數據）都納入索引，導致索引不堪重負。Windows本身的索引優化就相對較差。儘管索引看似是讀取，但其<strong>數據庫文件</strong>在插入、修改數據時，內部會觸發複雜的寫入操作。<strong>作者</strong>舉例說明，如修改一個數據，系統可能創建新格子並作廢舊格子，隨後觸發空間整理，將後續數據前移，這會導致實際磁盤寫入量遠大於數據本身的體積。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/YjHdZxYBakI_9.jpg" /></p> <h2>反人類的UI設計與最終建議</h2> <p>此外，<strong>作者</strong>也批評了Windows索引設置中<strong>反人類的UI設計</strong>，如同控制面板與設置一樣，索引也有兩個完全不同的設置界面。更糟糕的是，某個界面上D盤可能顯示未選中，但點擊進入後卻發現其子文件夾已被勾選，極具誤導性。因此，<strong>作者</strong>建議用戶直接禁用Windows內建的索引功能，轉而使用第三方搜索軟件，例如實用高效的<strong>Everything</strong>。</p> <p>最後，<strong>作者</strong>總結了幾個觀點：</p> <ol> <li>關於「補丁是否真的會摧毀硬碟」，<strong>作者</strong>無法100%肯定，但根據微軟官方和硬碟主控芯片廠商的說法，以及<strong>作者</strong>的個人判斷，由該補丁直接導致硬碟損壞的<strong>概率極低</strong>。</li> <li>硬碟問題的原因<strong>千奇百怪</strong>，很有可能恰好發生在打補丁之後，這很容易讓人產生<strong>歸因謬誤</strong>，且排查硬碟損壞原因的難度極大。國內行銷號常常製造恐慌以賺取流量。</li> <li>Windows一些<strong>反人類的設置界面</strong>確實需要優化，例如「裡面勾選了，外面卻顯示沒勾選」的災難級UI設計。</li> </ol> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">自打一位日本人爆料說windows更新會讓你硬盤數據丟失甚至損毀。但是我按照日本人的做法。我發動了我能動用的所有硬盤。包括購買網傳對應型號硬盤。我一片，邊亮一片，一起測試。包括請差評硬件部幫忙測試。都無法穩定復現！後面我也發動態希望遇到問題的粉絲也能提供線索。發動粉絲其實很難的。因為這個問題要找到原因步驟非常繁瑣。遠比我之前海綿寶寶導致崩潰難多了。所以真沒辦法和營銷號拼速度。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不過好在有一名粉肥宅快樂200斤。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/YjHdZxYBakI_59.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">他是一名裝機博主，他也遇到了問題。不過他的症狀有點不一樣。他自稱是更新補丁後。硬盤壽命下降，表現為大量數據寫入。他自稱寫入了上百G。於是我希望他能把硬盤直接寄給我。不要動任何數據。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">其實這一步就很勸退人了。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">畢竟硬盤裡有隱私數據。對方必須充分信任我。才願意把硬盤原封不動的寄給我。所以這也是這個補丁問題排查的困難之處。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">幸好他是一名裝機博主。手上硬盤夠多。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">他直接克隆了硬盤之後，寄給我了。要是普通人，別說寄給我，克隆硬盤。找替代硬盤，處處勸退。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">既然天時利地人和。我終於可以接近真相了！把他的硬盤插入我的電腦開機後。我發現一個明顯異常情況。索引瘋狂的寫入硬盤。按照我的固有觀念。索引不應該是讀取嗎？</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">為什麼寫入那麼大。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我和邊亮一起用專業工具排查系統進程。沒想到系統索引的數據庫文件已經被幹到接近4個G了！而且肉眼可見在不停增長！打開他的索引設置，我靠。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">他居然把整個硬盤全部加入索引了！默認設置是不可能把整個硬盤加入索引的！於是我問了這個粉絲。他說他是有一次發現文件搜索失效了。他就上網搜索教程。按照教程倒騰了下。可能就是在這類教程倒騰下。把整個硬盤設置進去了。我不確定他看了哪些教程。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/YjHdZxYBakI_130.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">但我從文件時間上看。他重建索引的時候。正好是他發帖抱怨補丁之前。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我們來梳理一下時間線。8月15日他安裝了網傳“炸盤補丁”3878。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">9月3日他發現本地搜索異常。遂上網搜索教程。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">同日 22點47分25秒。他把整個硬盤設為索引範圍。9月4日發布第一條動態。懷疑自己安裝補丁導致硬盤狂寫。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">同日再次發布多條動態。抱怨硬盤寫入異常掉健康。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">9月5日硬盤到達我這，定位索引問題。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">當然了。這裡大家不要去指責這位粉絲。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">在營銷號鋪天蓋地影響下。非技術背景的人。很容易被誤導。由於他把整個硬盤設置成索引範圍。尤其他的微信聊天記錄也在索引範圍內。大家也知道。微信聊天記錄本身就非常大。特別是小文件非常多。這就導致索引不堪重負。本身windows索引優化就很差。我之前做過視頻的。開了索引導致帶音頻的文件夾打開都卡卡的。他把整個硬盤加入索引。硬盤肯定很難受的。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/YjHdZxYBakI_190.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不過這裡還有一個問題。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">索引不應該都是讀嗎。其實不然。大家看到索引你數據庫文件了嗎。他的索引數據庫文件已經快4G了。雖然我不知道微軟索引數據庫的文件結構是怎麼設計的。在這麼大的數據庫文件中插入數據。不排除會導致數據庫文件內部大量數據寫入。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">數據庫文件並不是你寫入1M數據。磁盤就給你寫入1M的。我給大家舉個例子。比如你插入10條數據。占用了10個格子，分別序號0-9。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">如果你改了序號為2的數據格子。他可能會創建一個新的格子。編號為10。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">然後2號格子設置為作廢。隨著被作廢的格子越來越多。會觸發空間整理。系統會把3號以後的格子向前挪一個位置。這樣磁盤的寫入量就是3號-10號所有格子占用的空間數。這就是索引導致硬盤大量寫入的原理。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">當然實際會更複雜。我只是舉一個簡單例子來說明。這裡還要說一個索引噁心的地方。和控制面板與設置一樣。索引也有兩個完全不同的設置界面。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">比如這個界面。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">大家看D盤是不是沒選上。你可能以為D盤都沒有被索引是吧。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">你點開看看。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">居然有一個子文件夾是選中的。所以這個界面非常誤導人。所以我個人建議。直接禁用索引功能把。直接用第三方搜索軟件。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/YjHdZxYBakI_256.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">比如everything就很好用。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">這期視頻是臨時加更的。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我就沒做很精緻。我想表達幾個觀點。1、這個補丁是不是真的會摧毀硬盤。我沒辦法給出100%肯定。但至少微軟官方。以及硬盤主控芯片廠商都表示。無法復現。我個人判斷：。由這個補丁直接導致硬盤損壞。概率極低。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">2、硬盤出問題原因千奇百怪。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">很有可能恰好發生在打補丁之後。此時很容易讓人出現歸因謬誤。畢竟不是每個人都能通過專業工具去查找原因。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">而且查找硬盤損壞的原因。難度非常大。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">大家都感到恐慌。也得以於國內營銷號聳人聽聞。他們壓根不驗證也不測試。製造恐慌恰流量爽歪歪。3、windows一些反人類的設置界面真要優化一下了。我是不明白到底是什麼腦迴路。會出現裡面勾上了。外面卻顯示沒勾上這種災難級別的UI設計。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">好了，這期視頻就到這裡。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">想知道軟件不為人知的秘密。關注我和邊亮哦！</p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=YjHdZxYBakI">https://www.youtube.com/watch?v=YjHdZxYBakI</a></p><p>BGM:</p><p>Revali's Theme</p><p>Rito Village</p><p>Kass' Theme - Violin Marimba Cover (Zelda Breath of the Wild)</p><p>感谢@IssaraDuo 的音乐！</p><p></p><p>测试了无数硬盘，均无法稳定复现，终于有一位粉丝﻿@肥宅快乐200斤﻿ 遇到问题，同意把带系统的硬盘寄给我，我这次要帮他和大家找到真相！ </p><p></p><p>欢迎订阅👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p>Welcome to subscribe👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p></p><p>喜欢我的视频，请按赞、分享哦~</p><p>Like my video welcome hit like and share it~</p><p></p><p>开启小铃铛第一时间接收最新资讯~</p><p>🔔Light up the little bell and receive the latest news first</p>]]>
      </description>
      <content:encoded><![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/YjHdZxYBakI/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=YjHdZxYBakI">https://www.youtube.com/watch?v=YjHdZxYBakI</a></p><h1>值得閱讀的理由</h1> <ul> <li>揭露並詳細分析了廣為流傳的「Windows 更新導致硬碟損壞」迷思，提供基於實際測試與調查的結論。</li> <li>展示了科技內容創作者如何透過嚴謹的實驗、粉絲協助及專業工具，逐步排查複雜的軟硬體問題，釐清真相。</li> <li>提醒讀者注意Windows系統中不易察覺的「索引」功能設定陷阱，並提出優化或替代方案，避免不必要的硬碟損耗。</li> </ul> <hr /> <h1>摘要</h1> <p>近期，一位日本用戶爆料稱特定的Windows更新會導致硬碟數據丟失甚至損毀，引發廣泛關注。<strong>作者</strong>在收到這一消息後，立即發動了所有能動用的硬碟，甚至購買了網傳的對應型號硬碟，並邀請專業團隊協助測試，但始終無法穩定復現所謂的「炸盤」問題。這個問題的複雜性遠超以往，導致<strong>作者</strong>難以與僅憑臆測的行銷號競爭速度，查找真相的過程極其艱難。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/YjHdZxYBakI_95.jpg" /></p> <h2>關鍵線索：來自粉絲的特殊案例</h2> <p>在<strong>作者</strong>發佈動態尋求線索後，一位名為「肥宅快樂200斤」的裝機博主粉絲提供了寶貴的資訊。他的症狀與網路傳聞略有不同，他發現安裝補丁後硬碟壽命顯著下降，表現為<strong>大量數據寫入</strong>，據他自稱寫入了上百GB。<strong>作者</strong>隨即希望他能將硬碟直接寄過來進行檢測，且不要動任何數據。這一步對普通用戶來說極具挑戰性，因為涉及隱私，需要高度信任。幸運的是，這位粉絲擁有多個硬碟，他選擇克隆硬碟後將副本寄給<strong>作者</strong>，使得調查得以繼續。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/YjHdZxYBakI_180.jpg" /></p> <h2>真相大白：元兇竟是Windows索引功能</h2> <p>當<strong>作者</strong>將粉絲的硬碟接入電腦後，立即發現了異常：硬碟正在<strong>瘋狂寫入索引數據</strong>。根據常識，索引功能主要應為讀取操作，如此大量的寫入令人費解。<strong>作者</strong>與<strong>邊亮</strong>一同使用專業工具排查系統進程，驚訝地發現系統索引的數據庫文件已接近4GB，並仍在肉眼可見地持續增長。進一步檢查後發現，這位粉絲竟然將<strong>整個硬碟都加入了索引範圍</strong>，這並非Windows的預設設定。詢問粉絲後得知，他曾因文件搜索失效而上網搜尋教程，在操作過程中可能錯誤地將整個硬碟設定為索引對象。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/YjHdZxYBakI_285.jpg" /></p> <h2>時間線梳理與技術原理揭秘</h2> <p><strong>作者</strong>仔細梳理了時間線：粉絲於8月15日安裝了網傳的「炸盤補丁」3878；9月3日發現本地搜索異常並搜尋教程；同日22點47分25秒，他將整個硬碟設為索引範圍；次日（9月4日）便發布動態抱怨硬碟大量寫入並健康度下降。最終，硬碟於9月5日送達<strong>作者</strong>處，索引問題被定位。<strong>作者</strong>強調，不應指責這位粉絲，因為在行銷號鋪天蓋地、非技術背景的人很容易被誤導。</p> <p><strong>作者</strong>解釋了為何索引會導致大量寫入：由於粉絲將整個硬碟（包括大量如微信聊天記錄這類包含大量小文件的數據）都納入索引，導致索引不堪重負。Windows本身的索引優化就相對較差。儘管索引看似是讀取，但其<strong>數據庫文件</strong>在插入、修改數據時，內部會觸發複雜的寫入操作。<strong>作者</strong>舉例說明，如修改一個數據，系統可能創建新格子並作廢舊格子，隨後觸發空間整理，將後續數據前移，這會導致實際磁盤寫入量遠大於數據本身的體積。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/YjHdZxYBakI_9.jpg" /></p> <h2>反人類的UI設計與最終建議</h2> <p>此外，<strong>作者</strong>也批評了Windows索引設置中<strong>反人類的UI設計</strong>，如同控制面板與設置一樣，索引也有兩個完全不同的設置界面。更糟糕的是，某個界面上D盤可能顯示未選中，但點擊進入後卻發現其子文件夾已被勾選，極具誤導性。因此，<strong>作者</strong>建議用戶直接禁用Windows內建的索引功能，轉而使用第三方搜索軟件，例如實用高效的<strong>Everything</strong>。</p> <p>最後，<strong>作者</strong>總結了幾個觀點：</p> <ol> <li>關於「補丁是否真的會摧毀硬碟」，<strong>作者</strong>無法100%肯定，但根據微軟官方和硬碟主控芯片廠商的說法，以及<strong>作者</strong>的個人判斷，由該補丁直接導致硬碟損壞的<strong>概率極低</strong>。</li> <li>硬碟問題的原因<strong>千奇百怪</strong>，很有可能恰好發生在打補丁之後，這很容易讓人產生<strong>歸因謬誤</strong>，且排查硬碟損壞原因的難度極大。國內行銷號常常製造恐慌以賺取流量。</li> <li>Windows一些<strong>反人類的設置界面</strong>確實需要優化，例如「裡面勾選了，外面卻顯示沒勾選」的災難級UI設計。</li> </ol> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">自打一位日本人爆料說windows更新會讓你硬盤數據丟失甚至損毀。但是我按照日本人的做法。我發動了我能動用的所有硬盤。包括購買網傳對應型號硬盤。我一片，邊亮一片，一起測試。包括請差評硬件部幫忙測試。都無法穩定復現！後面我也發動態希望遇到問題的粉絲也能提供線索。發動粉絲其實很難的。因為這個問題要找到原因步驟非常繁瑣。遠比我之前海綿寶寶導致崩潰難多了。所以真沒辦法和營銷號拼速度。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不過好在有一名粉肥宅快樂200斤。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/YjHdZxYBakI_59.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">他是一名裝機博主，他也遇到了問題。不過他的症狀有點不一樣。他自稱是更新補丁後。硬盤壽命下降，表現為大量數據寫入。他自稱寫入了上百G。於是我希望他能把硬盤直接寄給我。不要動任何數據。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">其實這一步就很勸退人了。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">畢竟硬盤裡有隱私數據。對方必須充分信任我。才願意把硬盤原封不動的寄給我。所以這也是這個補丁問題排查的困難之處。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">幸好他是一名裝機博主。手上硬盤夠多。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">他直接克隆了硬盤之後，寄給我了。要是普通人，別說寄給我，克隆硬盤。找替代硬盤，處處勸退。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">既然天時利地人和。我終於可以接近真相了！把他的硬盤插入我的電腦開機後。我發現一個明顯異常情況。索引瘋狂的寫入硬盤。按照我的固有觀念。索引不應該是讀取嗎？</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">為什麼寫入那麼大。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我和邊亮一起用專業工具排查系統進程。沒想到系統索引的數據庫文件已經被幹到接近4個G了！而且肉眼可見在不停增長！打開他的索引設置，我靠。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">他居然把整個硬盤全部加入索引了！默認設置是不可能把整個硬盤加入索引的！於是我問了這個粉絲。他說他是有一次發現文件搜索失效了。他就上網搜索教程。按照教程倒騰了下。可能就是在這類教程倒騰下。把整個硬盤設置進去了。我不確定他看了哪些教程。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/YjHdZxYBakI_130.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">但我從文件時間上看。他重建索引的時候。正好是他發帖抱怨補丁之前。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我們來梳理一下時間線。8月15日他安裝了網傳“炸盤補丁”3878。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">9月3日他發現本地搜索異常。遂上網搜索教程。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">同日 22點47分25秒。他把整個硬盤設為索引範圍。9月4日發布第一條動態。懷疑自己安裝補丁導致硬盤狂寫。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">同日再次發布多條動態。抱怨硬盤寫入異常掉健康。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">9月5日硬盤到達我這，定位索引問題。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">當然了。這裡大家不要去指責這位粉絲。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">在營銷號鋪天蓋地影響下。非技術背景的人。很容易被誤導。由於他把整個硬盤設置成索引範圍。尤其他的微信聊天記錄也在索引範圍內。大家也知道。微信聊天記錄本身就非常大。特別是小文件非常多。這就導致索引不堪重負。本身windows索引優化就很差。我之前做過視頻的。開了索引導致帶音頻的文件夾打開都卡卡的。他把整個硬盤加入索引。硬盤肯定很難受的。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/YjHdZxYBakI_190.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不過這裡還有一個問題。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">索引不應該都是讀嗎。其實不然。大家看到索引你數據庫文件了嗎。他的索引數據庫文件已經快4G了。雖然我不知道微軟索引數據庫的文件結構是怎麼設計的。在這麼大的數據庫文件中插入數據。不排除會導致數據庫文件內部大量數據寫入。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">數據庫文件並不是你寫入1M數據。磁盤就給你寫入1M的。我給大家舉個例子。比如你插入10條數據。占用了10個格子，分別序號0-9。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">如果你改了序號為2的數據格子。他可能會創建一個新的格子。編號為10。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">然後2號格子設置為作廢。隨著被作廢的格子越來越多。會觸發空間整理。系統會把3號以後的格子向前挪一個位置。這樣磁盤的寫入量就是3號-10號所有格子占用的空間數。這就是索引導致硬盤大量寫入的原理。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">當然實際會更複雜。我只是舉一個簡單例子來說明。這裡還要說一個索引噁心的地方。和控制面板與設置一樣。索引也有兩個完全不同的設置界面。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">比如這個界面。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">大家看D盤是不是沒選上。你可能以為D盤都沒有被索引是吧。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">你點開看看。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">居然有一個子文件夾是選中的。所以這個界面非常誤導人。所以我個人建議。直接禁用索引功能把。直接用第三方搜索軟件。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/YjHdZxYBakI_256.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">比如everything就很好用。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">這期視頻是臨時加更的。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我就沒做很精緻。我想表達幾個觀點。1、這個補丁是不是真的會摧毀硬盤。我沒辦法給出100%肯定。但至少微軟官方。以及硬盤主控芯片廠商都表示。無法復現。我個人判斷：。由這個補丁直接導致硬盤損壞。概率極低。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">2、硬盤出問題原因千奇百怪。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">很有可能恰好發生在打補丁之後。此時很容易讓人出現歸因謬誤。畢竟不是每個人都能通過專業工具去查找原因。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">而且查找硬盤損壞的原因。難度非常大。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">大家都感到恐慌。也得以於國內營銷號聳人聽聞。他們壓根不驗證也不測試。製造恐慌恰流量爽歪歪。3、windows一些反人類的設置界面真要優化一下了。我是不明白到底是什麼腦迴路。會出現裡面勾上了。外面卻顯示沒勾上這種災難級別的UI設計。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">好了，這期視頻就到這裡。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">想知道軟件不為人知的秘密。關注我和邊亮哦！</p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=YjHdZxYBakI">https://www.youtube.com/watch?v=YjHdZxYBakI</a></p><p>BGM:</p><p>Revali's Theme</p><p>Rito Village</p><p>Kass' Theme - Violin Marimba Cover (Zelda Breath of the Wild)</p><p>感谢@IssaraDuo 的音乐！</p><p></p><p>测试了无数硬盘，均无法稳定复现，终于有一位粉丝﻿@肥宅快乐200斤﻿ 遇到问题，同意把带系统的硬盘寄给我，我这次要帮他和大家找到真相！ </p><p></p><p>欢迎订阅👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p>Welcome to subscribe👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p></p><p>喜欢我的视频，请按赞、分享哦~</p><p>Like my video welcome hit like and share it~</p><p></p><p>开启小铃铛第一时间接收最新资讯~</p><p>🔔Light up the little bell and receive the latest news first</p>]]></content:encoded>
      <itunes:image href="https://i.ytimg.com/vi/YjHdZxYBakI/hqdefault.jpg"/>
      <pubDate>2025-09-06T05:44:49.000Z</pubDate>
    </item><item>
      <title><![CDATA[iOS程序员偷懒？揭开时间选择器是假循环背后秘密！| 苹果 | Apple | iOS | iPhone | 技术债 | 时间 | 程序员 | 边亮]]></title>
      <link>https://www.youtube.com/watch?v=heTCe5Gk_PE</link>
      <itunes:title><![CDATA[iOS程序员偷懒？揭开时间选择器是假循环背后秘密！| 苹果 | Apple | iOS | iPhone | 技术债 | 时间 | 程序员 | 边亮]]></itunes:title>
      <itunes:author><![CDATA[epcdiy]]></itunes:author>
      <itunes:summary>
        <![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/heTCe5Gk_PE/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=heTCe5Gk_PE">https://www.youtube.com/watch?v=heTCe5Gk_PE</a></p><h1>值得閱讀的理由</h1> <ul> <li>揭露蘋果iOS系統中時鐘App時間選擇器看似無限循環，實則有限的奇特現象背後的<strong>真正原因</strong>。</li> <li>了解「作者」如何一步步排除萬難，從<strong>逆向工程系統固件、App Store應用，到最終自行重現問題</strong>，揭開技術債的真相。</li> <li>見證蘋果（Apple）身為科技巨頭，其產品中也存在<strong>「技術債」</strong>的有趣案例，顛覆普遍認知。</li> </ul> <hr /> <h1>摘要</h1> <h2>iOS時鐘App的謎團：有限的轉盤</h2> <p>影片的開頭引出了一個在網路上引起熱烈討論的現象：iPhone及iPad上的「時鐘」App，其鬧鐘時間選擇器的轉盤並非無限循環。當使用者不斷向上滑動時，小時會停在<strong>16點</strong>，分鐘則停在<strong>39分</strong>；向下滑動時，小時是1，分鐘是0。這個奇怪的數字組合引發了各種猜測，包括與喬布斯女兒出生時間相關的「陰謀論」。為了揭開這個謎團，「作者」與「邊亮」展開了一場技術探索之旅。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heTCe5Gk_PE_85.jpg" /></p> <h2>逆向工程的曲折之路：從固件到IPA</h2> <p>起初，「作者」推斷時鐘App是系統應用，嘗試從iOS固件中提取並逆向分析。然而，固件被AES加密，雖然成功解密，卻發現自iOS 11起，時鐘App已不在固件中，而是在App Store上獨立發布。接著，「作者」利用GitHub上的工具<code>ipatool</code>並透過ChatGPT獲取了時鐘App的包名<code>com.apple.mobiletimer</code>，成功下載了IPA包。然而，這個IPA包同樣是加密的，無法進行逆向工程，導致逆向分析系統App的道路徹底受阻，問題變得棘手。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heTCe5Gk_PE_210.jpg" /></p> <h2>真相大白：系統組件與硬編碼999</h2> <p>在多次嘗試無果後，「作者」決定轉換思路，自行開發一個簡單的鬧鐘App。在重新學習Xcode與Swift的過程中，他發現了內建的<code>DatePicker</code>組件具備時間選擇功能。透過自行編寫代碼，他成功重現了系統時鐘App中時間選擇器的有限滾動行為，證明問題並非出在App本身，而是源於底層的<strong>系統組件</strong>。進一步研究發現，<code>DatePicker</code>使用了歷史悠久的<code>UIPickerView</code>控件，這個控件的設計要求明確指定滾輪的元素總數，而不是原生支持無限循環。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heTCe5Gk_PE_6.jpg" /></p> <h2>技術債的浮現與最終結論</h2> <p>為了找到最終的證據，「作者」在「邊亮」的幫助下，成功逆向分析了未加密的SwiftUI庫，並從一個巨大的系統動態鏈接庫中找到了關鍵函數<code>numberOfRowsIncomponent</code>。這個函數中赫然寫著一個<strong>硬編碼數值：999</strong>。透過簡單的數學計算，揭示了小時數（999除以24餘15，加上起始1為16）和分鐘數（999除以60餘39）的上限來源。原來，這並非任何「彩蛋」，而是蘋果系統中的<strong>「技術債」</strong>——開發<code>DatePicker</code>的程式設計師為了模擬無限循環，偷懶地給<code>UIPickerView</code>控件賦予了999個元素，而非從根本上改造組件。儘管這是一個技術上的妥協，但因不影響使用且內存消耗可忽略不計，因此在最新的iOS乃至visionOS設備上，此設計依然被沿用。這個故事也告訴我們：即使是蘋果這樣頂級的科技公司，也存在著技術債。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heTCe5Gk_PE_9.jpg" /></p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">你知道iPhone的iOS系統也有技術債嗎？蘋果程序員也會偷懶哦！如果你手上有iPhone或者iPad。打開時鐘app。隨便建一個鬧鐘，設置時間。看到小時和分鐘兩個轉盤沒。我們不停地向上滑動，我們會發現。這個轉盤並不是一個無限循環。而是有限的，小時劃到底是16。分鐘滑倒底是39。如果是向下滑動，小時是1,分鐘是0。這個發現甚至在國外“貼吧”Reddit上面引發不少討論。有的人說這個16點39分是喬布斯女兒出生時間。也有的人說IT科技大佬都喜歡16點這個時間。反正各種陰謀論和猜測都出來了。國內也是。感覺大家都為此吵的不可開交。也有粉絲cue我，這種簡單問題。不就是一個小小的時鐘app嗎？這不分分鐘給你逆向了？但事實上，並沒有那麼簡單。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不過最終，我們還是發現了真相。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">讓我們開啟第26期的E邊玩去！揭開蘋果時間選擇器背後的秘密！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">對了，這是我和邊亮第26次合作。以後我們的合作視頻有一個系列名：。E邊玩去。按照我們的習慣。既然是這個app有問題。那麼我們直接拿這個app開刀。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heTCe5Gk_PE_62.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">因為這是一個系統app。所以我第一個想到的就是從系統固件裡提取。下載iOS固件很容易。於是我很快拿到了最新版固件恢復包。解壓之後發現。原來蘋果把固件鏡像都給aes加密了。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不過這難不倒我。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">github有個大佬製作了iOS固件解密工具ipsw。比較諷刺的是。這個工具在我的mac上運行不正常。我還是把它拷貝到windows下運行的。太諷刺了。解密之後的dmg windows下打不開。我又哼哧哼哧的拷回mac。於是我就看到了所有系統app。奇怪了，clock呢？我搜了一下clock和time，感覺都不對。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">為什麼不在固件包裡？</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">原來這個時間app好像在iOS11之後就不在系統固件裡了。是在AppStore裡面。這不坑爹嘛！於是我又找了另外一個github大神開發的工具。ipatool. 用它你只要知道包名。就能直接幫你下載ipa。於是我通過ChatGPT問到了系統時鐘的包名。com. apple. mobiletimer. 於是我用ipatool真的下載到了這個ipa包。於是我興奮的發給邊亮。感覺勝利就在眼前了。結果邊亮一看，kao。這個包是加密的，沒辦法逆向！找了兩個砸殼網站提交後都被拒絕了。看來。逆向系統app這條路被徹底堵死了。這個問題變得棘手了！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heTCe5Gk_PE_130.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">等下，一個鬧鐘app。這個app很難做嗎。為什麼我不能自己做一個呢？於是我下載了塵封已久的xcode。我記得我上一次使用xcode還是我剛畢業時所在的遊戲公司。一晃10年過去了。那時候我還是用OC寫代碼。xcode變化也真大啊。現在都是swift了。還好不難，花了點時間學習了一下。發現有一個叫DatePicker組件。就是包含了時間選擇功能。所以是不是系統自帶的鬧鐘也是用這個？代碼寫好後預覽畫面就有了這個選擇器。我用鼠標摩擦摩擦.....</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">魔鬼的步伐，復現了！看來這個和clock app無關！這壓根就是系統組件！原來我最開始那條路本來就走不通！看來程序還是要自己寫。才能發現問題！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">這下我們把重心放在系統控件DatePicker上。我們先查看官方文檔。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">DatePicker用的是UIPickerView。這是一個非常老的控件。iOS 2.0就開始有它了。我們在OverView上可以看到。“拾取器視圖顯示一個或多個滾輪。用戶可以通過操作這些滾輪來選擇項目。每個滾輪（也稱為組件）包含一系列索引行。代表可選的項目。每一行會顯示一個字符串或視圖。以便用戶可以識別該行上的項目。用戶通過將滾輪旋轉到所需的值來進行選擇。這些值與選定指示器對齊。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">”. 也就是說，這個滾輪選擇器。就是必須每一個項目都要對應一個索引。我們可以看到，下面的Topics。就是要你傳入選擇器的數值代理函數。也就是說，這個滾輪選擇器。必須是傳入總共多少個元素。數值代理函數實際上就是告訴控件。當前行對應什麼數值。填充滿了UIPickerView。讓人覺得這個選擇器是無限循環的。所以接下來我們就要解答視頻開頭的問題。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">這個元素到底有多少？</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heTCe5Gk_PE_230.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">為什麼小時是頂端是1,底端是16。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">為什麼分鐘的頂端是0,底端是39。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">這是一個彩蛋嗎？真的是喬布斯女兒生辰八字？為了拿到實錘證據。我們需要逆向系統組件。好在swiftui庫沒有加密。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">蘋果也非常雞賊。他把所有的系統二進制實現動態鏈接庫合併成了一個文件。整個dylib文件居然有4個G之巨。不過這難不住我背後的男人！他最終找到了這個神秘函數。numberOfRowsIncomponent.</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">有這麼一個函數。裡面有一個硬編數值：。999.</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">接下來，我們給你真相！我們來做一個小學數學題。我們知道，一天24小時。那麼999除以24餘15。一小時60分鐘，那麼999除以60餘39。還記得嗎，小時是從1開始的。所以15+1正好是16。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">明白了嗎？原來這個日期選擇器賦給滾輪控件的。控件元素的成員數量就是999。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">所以這並不是一個彩蛋。這就是蘋果系統的一個技術債。做時間選擇器DatePicker的程序員。懶得自己改造這個系統組件UIPickerView。只能按照組件的預設規定創建999個元素。讓時間選擇器看起來像是一個無限循環轉輪。當然這並不影響使用。浪費的內存也幾乎忽略不計。所以乃至最新的iOS設備依然沿用了這個設計。手上有visionPro的用戶。你們也可以試試。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heTCe5Gk_PE_303.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我好奇它的時間選擇器是不是也是這樣設計的？因為我看到官方文檔裡。visionOS 1.0+.</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">也是用了這個UIPickerView。手上有visionPro的朋友。幫我試試唄。結果發在評論裡告訴我把！怎麼樣？這個故事告訴我們：。原來蘋果也有技術債啊！別罵Windows了，它們都一樣！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">好了，這就是本期視頻全部內容了。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">喜歡逆向。想知道知名軟件暗藏的小秘密的！記得關注我和邊亮哦！</p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=heTCe5Gk_PE">https://www.youtube.com/watch?v=heTCe5Gk_PE</a></p><p>虽然这不是苹果的彩蛋，但本视频暗藏很多个彩蛋！</p><p>你知道iPhone的iOS系统也有技术债吗？苹果程序员也会偷懒哦！揭开苹果时间选择器是假循环背后的秘密！ </p><p></p><p>由挚友@IssaraDuo 演奏的BGM:</p><p>Golden</p><p>Mingle Song _Round and Round_</p><p>Natlan</p><p></p><p>欢迎订阅👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p>Welcome to subscribe👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p></p><p>喜欢我的视频，请按赞、分享哦~</p><p>Like my video welcome hit like and share it~</p><p></p><p>开启小铃铛第一时间接收最新资讯~</p><p>🔔Light up the little bell and receive the latest news first</p>]]>
      </itunes:summary>
      <description>
        <![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/heTCe5Gk_PE/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=heTCe5Gk_PE">https://www.youtube.com/watch?v=heTCe5Gk_PE</a></p><h1>值得閱讀的理由</h1> <ul> <li>揭露蘋果iOS系統中時鐘App時間選擇器看似無限循環，實則有限的奇特現象背後的<strong>真正原因</strong>。</li> <li>了解「作者」如何一步步排除萬難，從<strong>逆向工程系統固件、App Store應用，到最終自行重現問題</strong>，揭開技術債的真相。</li> <li>見證蘋果（Apple）身為科技巨頭，其產品中也存在<strong>「技術債」</strong>的有趣案例，顛覆普遍認知。</li> </ul> <hr /> <h1>摘要</h1> <h2>iOS時鐘App的謎團：有限的轉盤</h2> <p>影片的開頭引出了一個在網路上引起熱烈討論的現象：iPhone及iPad上的「時鐘」App，其鬧鐘時間選擇器的轉盤並非無限循環。當使用者不斷向上滑動時，小時會停在<strong>16點</strong>，分鐘則停在<strong>39分</strong>；向下滑動時，小時是1，分鐘是0。這個奇怪的數字組合引發了各種猜測，包括與喬布斯女兒出生時間相關的「陰謀論」。為了揭開這個謎團，「作者」與「邊亮」展開了一場技術探索之旅。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heTCe5Gk_PE_85.jpg" /></p> <h2>逆向工程的曲折之路：從固件到IPA</h2> <p>起初，「作者」推斷時鐘App是系統應用，嘗試從iOS固件中提取並逆向分析。然而，固件被AES加密，雖然成功解密，卻發現自iOS 11起，時鐘App已不在固件中，而是在App Store上獨立發布。接著，「作者」利用GitHub上的工具<code>ipatool</code>並透過ChatGPT獲取了時鐘App的包名<code>com.apple.mobiletimer</code>，成功下載了IPA包。然而，這個IPA包同樣是加密的，無法進行逆向工程，導致逆向分析系統App的道路徹底受阻，問題變得棘手。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heTCe5Gk_PE_210.jpg" /></p> <h2>真相大白：系統組件與硬編碼999</h2> <p>在多次嘗試無果後，「作者」決定轉換思路，自行開發一個簡單的鬧鐘App。在重新學習Xcode與Swift的過程中，他發現了內建的<code>DatePicker</code>組件具備時間選擇功能。透過自行編寫代碼，他成功重現了系統時鐘App中時間選擇器的有限滾動行為，證明問題並非出在App本身，而是源於底層的<strong>系統組件</strong>。進一步研究發現，<code>DatePicker</code>使用了歷史悠久的<code>UIPickerView</code>控件，這個控件的設計要求明確指定滾輪的元素總數，而不是原生支持無限循環。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heTCe5Gk_PE_6.jpg" /></p> <h2>技術債的浮現與最終結論</h2> <p>為了找到最終的證據，「作者」在「邊亮」的幫助下，成功逆向分析了未加密的SwiftUI庫，並從一個巨大的系統動態鏈接庫中找到了關鍵函數<code>numberOfRowsIncomponent</code>。這個函數中赫然寫著一個<strong>硬編碼數值：999</strong>。透過簡單的數學計算，揭示了小時數（999除以24餘15，加上起始1為16）和分鐘數（999除以60餘39）的上限來源。原來，這並非任何「彩蛋」，而是蘋果系統中的<strong>「技術債」</strong>——開發<code>DatePicker</code>的程式設計師為了模擬無限循環，偷懶地給<code>UIPickerView</code>控件賦予了999個元素，而非從根本上改造組件。儘管這是一個技術上的妥協，但因不影響使用且內存消耗可忽略不計，因此在最新的iOS乃至visionOS設備上，此設計依然被沿用。這個故事也告訴我們：即使是蘋果這樣頂級的科技公司，也存在著技術債。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heTCe5Gk_PE_9.jpg" /></p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">你知道iPhone的iOS系統也有技術債嗎？蘋果程序員也會偷懶哦！如果你手上有iPhone或者iPad。打開時鐘app。隨便建一個鬧鐘，設置時間。看到小時和分鐘兩個轉盤沒。我們不停地向上滑動，我們會發現。這個轉盤並不是一個無限循環。而是有限的，小時劃到底是16。分鐘滑倒底是39。如果是向下滑動，小時是1,分鐘是0。這個發現甚至在國外“貼吧”Reddit上面引發不少討論。有的人說這個16點39分是喬布斯女兒出生時間。也有的人說IT科技大佬都喜歡16點這個時間。反正各種陰謀論和猜測都出來了。國內也是。感覺大家都為此吵的不可開交。也有粉絲cue我，這種簡單問題。不就是一個小小的時鐘app嗎？這不分分鐘給你逆向了？但事實上，並沒有那麼簡單。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不過最終，我們還是發現了真相。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">讓我們開啟第26期的E邊玩去！揭開蘋果時間選擇器背後的秘密！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">對了，這是我和邊亮第26次合作。以後我們的合作視頻有一個系列名：。E邊玩去。按照我們的習慣。既然是這個app有問題。那麼我們直接拿這個app開刀。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heTCe5Gk_PE_62.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">因為這是一個系統app。所以我第一個想到的就是從系統固件裡提取。下載iOS固件很容易。於是我很快拿到了最新版固件恢復包。解壓之後發現。原來蘋果把固件鏡像都給aes加密了。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不過這難不倒我。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">github有個大佬製作了iOS固件解密工具ipsw。比較諷刺的是。這個工具在我的mac上運行不正常。我還是把它拷貝到windows下運行的。太諷刺了。解密之後的dmg windows下打不開。我又哼哧哼哧的拷回mac。於是我就看到了所有系統app。奇怪了，clock呢？我搜了一下clock和time，感覺都不對。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">為什麼不在固件包裡？</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">原來這個時間app好像在iOS11之後就不在系統固件裡了。是在AppStore裡面。這不坑爹嘛！於是我又找了另外一個github大神開發的工具。ipatool. 用它你只要知道包名。就能直接幫你下載ipa。於是我通過ChatGPT問到了系統時鐘的包名。com. apple. mobiletimer. 於是我用ipatool真的下載到了這個ipa包。於是我興奮的發給邊亮。感覺勝利就在眼前了。結果邊亮一看，kao。這個包是加密的，沒辦法逆向！找了兩個砸殼網站提交後都被拒絕了。看來。逆向系統app這條路被徹底堵死了。這個問題變得棘手了！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heTCe5Gk_PE_130.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">等下，一個鬧鐘app。這個app很難做嗎。為什麼我不能自己做一個呢？於是我下載了塵封已久的xcode。我記得我上一次使用xcode還是我剛畢業時所在的遊戲公司。一晃10年過去了。那時候我還是用OC寫代碼。xcode變化也真大啊。現在都是swift了。還好不難，花了點時間學習了一下。發現有一個叫DatePicker組件。就是包含了時間選擇功能。所以是不是系統自帶的鬧鐘也是用這個？代碼寫好後預覽畫面就有了這個選擇器。我用鼠標摩擦摩擦.....</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">魔鬼的步伐，復現了！看來這個和clock app無關！這壓根就是系統組件！原來我最開始那條路本來就走不通！看來程序還是要自己寫。才能發現問題！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">這下我們把重心放在系統控件DatePicker上。我們先查看官方文檔。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">DatePicker用的是UIPickerView。這是一個非常老的控件。iOS 2.0就開始有它了。我們在OverView上可以看到。“拾取器視圖顯示一個或多個滾輪。用戶可以通過操作這些滾輪來選擇項目。每個滾輪（也稱為組件）包含一系列索引行。代表可選的項目。每一行會顯示一個字符串或視圖。以便用戶可以識別該行上的項目。用戶通過將滾輪旋轉到所需的值來進行選擇。這些值與選定指示器對齊。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">”. 也就是說，這個滾輪選擇器。就是必須每一個項目都要對應一個索引。我們可以看到，下面的Topics。就是要你傳入選擇器的數值代理函數。也就是說，這個滾輪選擇器。必須是傳入總共多少個元素。數值代理函數實際上就是告訴控件。當前行對應什麼數值。填充滿了UIPickerView。讓人覺得這個選擇器是無限循環的。所以接下來我們就要解答視頻開頭的問題。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">這個元素到底有多少？</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heTCe5Gk_PE_230.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">為什麼小時是頂端是1,底端是16。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">為什麼分鐘的頂端是0,底端是39。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">這是一個彩蛋嗎？真的是喬布斯女兒生辰八字？為了拿到實錘證據。我們需要逆向系統組件。好在swiftui庫沒有加密。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">蘋果也非常雞賊。他把所有的系統二進制實現動態鏈接庫合併成了一個文件。整個dylib文件居然有4個G之巨。不過這難不住我背後的男人！他最終找到了這個神秘函數。numberOfRowsIncomponent.</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">有這麼一個函數。裡面有一個硬編數值：。999.</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">接下來，我們給你真相！我們來做一個小學數學題。我們知道，一天24小時。那麼999除以24餘15。一小時60分鐘，那麼999除以60餘39。還記得嗎，小時是從1開始的。所以15+1正好是16。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">明白了嗎？原來這個日期選擇器賦給滾輪控件的。控件元素的成員數量就是999。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">所以這並不是一個彩蛋。這就是蘋果系統的一個技術債。做時間選擇器DatePicker的程序員。懶得自己改造這個系統組件UIPickerView。只能按照組件的預設規定創建999個元素。讓時間選擇器看起來像是一個無限循環轉輪。當然這並不影響使用。浪費的內存也幾乎忽略不計。所以乃至最新的iOS設備依然沿用了這個設計。手上有visionPro的用戶。你們也可以試試。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heTCe5Gk_PE_303.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我好奇它的時間選擇器是不是也是這樣設計的？因為我看到官方文檔裡。visionOS 1.0+.</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">也是用了這個UIPickerView。手上有visionPro的朋友。幫我試試唄。結果發在評論裡告訴我把！怎麼樣？這個故事告訴我們：。原來蘋果也有技術債啊！別罵Windows了，它們都一樣！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">好了，這就是本期視頻全部內容了。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">喜歡逆向。想知道知名軟件暗藏的小秘密的！記得關注我和邊亮哦！</p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=heTCe5Gk_PE">https://www.youtube.com/watch?v=heTCe5Gk_PE</a></p><p>虽然这不是苹果的彩蛋，但本视频暗藏很多个彩蛋！</p><p>你知道iPhone的iOS系统也有技术债吗？苹果程序员也会偷懒哦！揭开苹果时间选择器是假循环背后的秘密！ </p><p></p><p>由挚友@IssaraDuo 演奏的BGM:</p><p>Golden</p><p>Mingle Song _Round and Round_</p><p>Natlan</p><p></p><p>欢迎订阅👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p>Welcome to subscribe👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p></p><p>喜欢我的视频，请按赞、分享哦~</p><p>Like my video welcome hit like and share it~</p><p></p><p>开启小铃铛第一时间接收最新资讯~</p><p>🔔Light up the little bell and receive the latest news first</p>]]>
      </description>
      <content:encoded><![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/heTCe5Gk_PE/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=heTCe5Gk_PE">https://www.youtube.com/watch?v=heTCe5Gk_PE</a></p><h1>值得閱讀的理由</h1> <ul> <li>揭露蘋果iOS系統中時鐘App時間選擇器看似無限循環，實則有限的奇特現象背後的<strong>真正原因</strong>。</li> <li>了解「作者」如何一步步排除萬難，從<strong>逆向工程系統固件、App Store應用，到最終自行重現問題</strong>，揭開技術債的真相。</li> <li>見證蘋果（Apple）身為科技巨頭，其產品中也存在<strong>「技術債」</strong>的有趣案例，顛覆普遍認知。</li> </ul> <hr /> <h1>摘要</h1> <h2>iOS時鐘App的謎團：有限的轉盤</h2> <p>影片的開頭引出了一個在網路上引起熱烈討論的現象：iPhone及iPad上的「時鐘」App，其鬧鐘時間選擇器的轉盤並非無限循環。當使用者不斷向上滑動時，小時會停在<strong>16點</strong>，分鐘則停在<strong>39分</strong>；向下滑動時，小時是1，分鐘是0。這個奇怪的數字組合引發了各種猜測，包括與喬布斯女兒出生時間相關的「陰謀論」。為了揭開這個謎團，「作者」與「邊亮」展開了一場技術探索之旅。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heTCe5Gk_PE_85.jpg" /></p> <h2>逆向工程的曲折之路：從固件到IPA</h2> <p>起初，「作者」推斷時鐘App是系統應用，嘗試從iOS固件中提取並逆向分析。然而，固件被AES加密，雖然成功解密，卻發現自iOS 11起，時鐘App已不在固件中，而是在App Store上獨立發布。接著，「作者」利用GitHub上的工具<code>ipatool</code>並透過ChatGPT獲取了時鐘App的包名<code>com.apple.mobiletimer</code>，成功下載了IPA包。然而，這個IPA包同樣是加密的，無法進行逆向工程，導致逆向分析系統App的道路徹底受阻，問題變得棘手。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heTCe5Gk_PE_210.jpg" /></p> <h2>真相大白：系統組件與硬編碼999</h2> <p>在多次嘗試無果後，「作者」決定轉換思路，自行開發一個簡單的鬧鐘App。在重新學習Xcode與Swift的過程中，他發現了內建的<code>DatePicker</code>組件具備時間選擇功能。透過自行編寫代碼，他成功重現了系統時鐘App中時間選擇器的有限滾動行為，證明問題並非出在App本身，而是源於底層的<strong>系統組件</strong>。進一步研究發現，<code>DatePicker</code>使用了歷史悠久的<code>UIPickerView</code>控件，這個控件的設計要求明確指定滾輪的元素總數，而不是原生支持無限循環。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heTCe5Gk_PE_6.jpg" /></p> <h2>技術債的浮現與最終結論</h2> <p>為了找到最終的證據，「作者」在「邊亮」的幫助下，成功逆向分析了未加密的SwiftUI庫，並從一個巨大的系統動態鏈接庫中找到了關鍵函數<code>numberOfRowsIncomponent</code>。這個函數中赫然寫著一個<strong>硬編碼數值：999</strong>。透過簡單的數學計算，揭示了小時數（999除以24餘15，加上起始1為16）和分鐘數（999除以60餘39）的上限來源。原來，這並非任何「彩蛋」，而是蘋果系統中的<strong>「技術債」</strong>——開發<code>DatePicker</code>的程式設計師為了模擬無限循環，偷懶地給<code>UIPickerView</code>控件賦予了999個元素，而非從根本上改造組件。儘管這是一個技術上的妥協，但因不影響使用且內存消耗可忽略不計，因此在最新的iOS乃至visionOS設備上，此設計依然被沿用。這個故事也告訴我們：即使是蘋果這樣頂級的科技公司，也存在著技術債。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heTCe5Gk_PE_9.jpg" /></p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">你知道iPhone的iOS系統也有技術債嗎？蘋果程序員也會偷懶哦！如果你手上有iPhone或者iPad。打開時鐘app。隨便建一個鬧鐘，設置時間。看到小時和分鐘兩個轉盤沒。我們不停地向上滑動，我們會發現。這個轉盤並不是一個無限循環。而是有限的，小時劃到底是16。分鐘滑倒底是39。如果是向下滑動，小時是1,分鐘是0。這個發現甚至在國外“貼吧”Reddit上面引發不少討論。有的人說這個16點39分是喬布斯女兒出生時間。也有的人說IT科技大佬都喜歡16點這個時間。反正各種陰謀論和猜測都出來了。國內也是。感覺大家都為此吵的不可開交。也有粉絲cue我，這種簡單問題。不就是一個小小的時鐘app嗎？這不分分鐘給你逆向了？但事實上，並沒有那麼簡單。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不過最終，我們還是發現了真相。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">讓我們開啟第26期的E邊玩去！揭開蘋果時間選擇器背後的秘密！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">對了，這是我和邊亮第26次合作。以後我們的合作視頻有一個系列名：。E邊玩去。按照我們的習慣。既然是這個app有問題。那麼我們直接拿這個app開刀。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heTCe5Gk_PE_62.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">因為這是一個系統app。所以我第一個想到的就是從系統固件裡提取。下載iOS固件很容易。於是我很快拿到了最新版固件恢復包。解壓之後發現。原來蘋果把固件鏡像都給aes加密了。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不過這難不倒我。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">github有個大佬製作了iOS固件解密工具ipsw。比較諷刺的是。這個工具在我的mac上運行不正常。我還是把它拷貝到windows下運行的。太諷刺了。解密之後的dmg windows下打不開。我又哼哧哼哧的拷回mac。於是我就看到了所有系統app。奇怪了，clock呢？我搜了一下clock和time，感覺都不對。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">為什麼不在固件包裡？</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">原來這個時間app好像在iOS11之後就不在系統固件裡了。是在AppStore裡面。這不坑爹嘛！於是我又找了另外一個github大神開發的工具。ipatool. 用它你只要知道包名。就能直接幫你下載ipa。於是我通過ChatGPT問到了系統時鐘的包名。com. apple. mobiletimer. 於是我用ipatool真的下載到了這個ipa包。於是我興奮的發給邊亮。感覺勝利就在眼前了。結果邊亮一看，kao。這個包是加密的，沒辦法逆向！找了兩個砸殼網站提交後都被拒絕了。看來。逆向系統app這條路被徹底堵死了。這個問題變得棘手了！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heTCe5Gk_PE_130.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">等下，一個鬧鐘app。這個app很難做嗎。為什麼我不能自己做一個呢？於是我下載了塵封已久的xcode。我記得我上一次使用xcode還是我剛畢業時所在的遊戲公司。一晃10年過去了。那時候我還是用OC寫代碼。xcode變化也真大啊。現在都是swift了。還好不難，花了點時間學習了一下。發現有一個叫DatePicker組件。就是包含了時間選擇功能。所以是不是系統自帶的鬧鐘也是用這個？代碼寫好後預覽畫面就有了這個選擇器。我用鼠標摩擦摩擦.....</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">魔鬼的步伐，復現了！看來這個和clock app無關！這壓根就是系統組件！原來我最開始那條路本來就走不通！看來程序還是要自己寫。才能發現問題！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">這下我們把重心放在系統控件DatePicker上。我們先查看官方文檔。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">DatePicker用的是UIPickerView。這是一個非常老的控件。iOS 2.0就開始有它了。我們在OverView上可以看到。“拾取器視圖顯示一個或多個滾輪。用戶可以通過操作這些滾輪來選擇項目。每個滾輪（也稱為組件）包含一系列索引行。代表可選的項目。每一行會顯示一個字符串或視圖。以便用戶可以識別該行上的項目。用戶通過將滾輪旋轉到所需的值來進行選擇。這些值與選定指示器對齊。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">”. 也就是說，這個滾輪選擇器。就是必須每一個項目都要對應一個索引。我們可以看到，下面的Topics。就是要你傳入選擇器的數值代理函數。也就是說，這個滾輪選擇器。必須是傳入總共多少個元素。數值代理函數實際上就是告訴控件。當前行對應什麼數值。填充滿了UIPickerView。讓人覺得這個選擇器是無限循環的。所以接下來我們就要解答視頻開頭的問題。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">這個元素到底有多少？</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heTCe5Gk_PE_230.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">為什麼小時是頂端是1,底端是16。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">為什麼分鐘的頂端是0,底端是39。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">這是一個彩蛋嗎？真的是喬布斯女兒生辰八字？為了拿到實錘證據。我們需要逆向系統組件。好在swiftui庫沒有加密。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">蘋果也非常雞賊。他把所有的系統二進制實現動態鏈接庫合併成了一個文件。整個dylib文件居然有4個G之巨。不過這難不住我背後的男人！他最終找到了這個神秘函數。numberOfRowsIncomponent.</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">有這麼一個函數。裡面有一個硬編數值：。999.</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">接下來，我們給你真相！我們來做一個小學數學題。我們知道，一天24小時。那麼999除以24餘15。一小時60分鐘，那麼999除以60餘39。還記得嗎，小時是從1開始的。所以15+1正好是16。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">明白了嗎？原來這個日期選擇器賦給滾輪控件的。控件元素的成員數量就是999。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">所以這並不是一個彩蛋。這就是蘋果系統的一個技術債。做時間選擇器DatePicker的程序員。懶得自己改造這個系統組件UIPickerView。只能按照組件的預設規定創建999個元素。讓時間選擇器看起來像是一個無限循環轉輪。當然這並不影響使用。浪費的內存也幾乎忽略不計。所以乃至最新的iOS設備依然沿用了這個設計。手上有visionPro的用戶。你們也可以試試。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/heTCe5Gk_PE_303.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我好奇它的時間選擇器是不是也是這樣設計的？因為我看到官方文檔裡。visionOS 1.0+.</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">也是用了這個UIPickerView。手上有visionPro的朋友。幫我試試唄。結果發在評論裡告訴我把！怎麼樣？這個故事告訴我們：。原來蘋果也有技術債啊！別罵Windows了，它們都一樣！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">好了，這就是本期視頻全部內容了。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">喜歡逆向。想知道知名軟件暗藏的小秘密的！記得關注我和邊亮哦！</p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=heTCe5Gk_PE">https://www.youtube.com/watch?v=heTCe5Gk_PE</a></p><p>虽然这不是苹果的彩蛋，但本视频暗藏很多个彩蛋！</p><p>你知道iPhone的iOS系统也有技术债吗？苹果程序员也会偷懒哦！揭开苹果时间选择器是假循环背后的秘密！ </p><p></p><p>由挚友@IssaraDuo 演奏的BGM:</p><p>Golden</p><p>Mingle Song _Round and Round_</p><p>Natlan</p><p></p><p>欢迎订阅👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p>Welcome to subscribe👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p></p><p>喜欢我的视频，请按赞、分享哦~</p><p>Like my video welcome hit like and share it~</p><p></p><p>开启小铃铛第一时间接收最新资讯~</p><p>🔔Light up the little bell and receive the latest news first</p>]]></content:encoded>
      <itunes:image href="https://i.ytimg.com/vi/heTCe5Gk_PE/hqdefault.jpg"/>
      <pubDate>2025-08-27T09:49:43.000Z</pubDate>
    </item><item>
      <title><![CDATA[建一个文件夹居然能让系统循环蓝屏？硬核破案！| 蓝屏 | Windows | 微软 | bug | 文件夹 | 注册吧 | 边亮 | 整蛊]]></title>
      <link>https://www.youtube.com/watch?v=hzWF2NNLhBY</link>
      <itunes:title><![CDATA[建一个文件夹居然能让系统循环蓝屏？硬核破案！| 蓝屏 | Windows | 微软 | bug | 文件夹 | 注册吧 | 边亮 | 整蛊]]></itunes:title>
      <itunes:author><![CDATA[epcdiy]]></itunes:author>
      <itunes:summary>
        <![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/hzWF2NNLhBY/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=hzWF2NNLhBY">https://www.youtube.com/watch?v=hzWF2NNLhBY</a></p><h1>值得閱讀的理由</h1> <ul> <li>揭開一個讓Windows陷入「無限藍屏」循環的神秘檔案或資料夾，了解其背後的程式碼邏輯。</li> <li>深入探索Windows系統為何會因為一個看似無關緊要的「OSDATA」檔案而「主動罷工」。</li> <li>認識微軟的「OneCore」核心理念如何導致Windows與Xbox系統間的程式碼共享與殘留。</li> </ul> <hr /> <h1>摘要</h1> <p>這段影片延續了「作者」之前關於電腦桌面「賽博燈泡」的影片，揭示了一個更令人意外的電腦惡作劇。有國外部落客發現，只要在特定路徑下創建一個名為「OSDATA」的檔案或資料夾，電腦重啟後就會陷入無限的藍屏詛咒，對於不懂技術的使用者而言，這無疑是一場「P0級事故」。影片旨在探討導致這種現象的原因以及Windows系統為何如此「脆弱」。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_95.jpg" /></p> <h2>藍屏的重現與現象分析</h2> <p>「作者」示範了兩種觸發藍屏的方法。第一種是在<code>C:\Windows\System32\config</code>路徑下創建一個名為<strong>OSDATA</strong>的檔案，並隨意寫入內容，重啟後會出現「BAD SYSTEM CONFIG INFO」藍屏。第二種方法是直接在相同路徑創建一個名為<strong>OSDATA</strong>的資料夾，重啟後則會出現「CONFIG LIST FAILED」藍屏。這兩種情況都指向系統的<strong>註冊表配置</strong>出現問題，且藍屏發生在Windows初始化階段，在進入桌面之前，正好卡在加載註冊表配置的環節。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_212.jpg" /></p> <p>透過逆向工程分析，「作者」發現藍屏代碼位於<code>ntkrnlmp.exe</code>模組中，其對應檔案為<code>ntoskrnl.exe</code>。Windows註冊表的內部有一個名為<strong>hivelist</strong>的註冊表配置文件清單，系統啟動時會主動加載其中的檔案，而<strong>OSDATA</strong>赫然在列。儘管微軟官方文件並未明確提及<strong>OSDATA</strong>這個檔案，但透過藍屏的類型（BAD SYSTEM CONFIG INFO 和 CONFIG LIST FAILED），「作者」推斷<strong>OSDATA</strong>確實是一個與註冊表配置文件相關的檔案。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_301.jpg" /></p> <p>更深層次的逆向分析顯示，當<strong>OSDATA</strong>是一個文字檔案時，藍屏發生在<code>CmpInitHiveFromFile</code>；當它是一個資料夾時，藍屏發生在<code>CmpIsHiveLoadUnloadRundownActive</code>。這表明藍屏並非程式碼錯誤導致的崩潰，而是系統的<strong>主動罷工</strong>。Windows設有一個監測機制，當它判斷系統出現不可挽救的嚴重問題時，便會主動觸發藍屏。由於<strong>OSDATA</strong>被視為一個重要的註冊表數據庫檔案，如果它以錯誤的格式（例如文字檔案或資料夾）存在，系統便會認定其已損壞且無法修復，從而啟動「罷工」機制。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_6.jpg" /></p> <h2>OSDATA的真實身份：Xbox代碼殘留</h2> <p>「作者」進一步探究<strong>OSDATA</strong>的真實用途及為何它預設不存在於Windows系統中。令人驚訝的是，透過搜尋，<strong>OSDATA</strong>的字樣出現在Xbox One的一個Wiki頁面中，明確指出它是Xbox One的註冊表檔案，記錄著各種Xbox配置，例如虛擬磁盤映射和防火牆等。這引發了<strong>OSDATA</strong>是否是Xbox One相關檔案在Windows系統中的殘留的疑問。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_8.jpg" /></p> <p>「作者」解釋，微軟在某些系統核心組件中可能採用了<strong>條件編譯</strong>，使得Xbox和Windows可能共用同一份工程代碼（例如<code>ntoskrnl.exe</code>），並透過類似宏定義的方式來區分不同平台的程式碼。由於某種原因，這段涉及<strong>OSDATA</strong>的程式碼可能沒有被正確地編寫宏定義，使其在Windows編譯時沒有被移除。這也解釋了為什麼這個錯誤在日常使用中不會觸發，因為它需要人為刻意創建相關檔案或資料夾。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_9.jpg" /></p> <p>為了進一步證實這一點，「作者」和其團隊發現其他系統組件如<code>taskhostw</code>也會嘗試訪問<strong>OSDATA</strong>，儘管最終都返回失敗。透過追蹤<code>taskhostw</code>的行為，他們發現它訪問了一個<code>AppCompatFlag</code>註冊表，並在調用堆棧中找到了<code>FlightSettings.dll</code>以及一個名為<code>GetFlightingRegistryPathForXbox</code>的函數，該函數明確包含了各種<strong>OSDATA</strong>路徑的註冊表資訊，並判斷當前系統是「default」還是「xbox」。這些證據以及資源檔案中大量的「one」字樣，都印證了<strong>OSDATA</strong>確實是與Xbox One相關的路徑，說明Windows系統中確實存在與Xbox共用的程式碼組件。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_11.jpg" /></p> <h2>程式碼的起源與OneCore理念</h2> <p>關於這些殘留程式碼是否為「遠古屎山代碼」的疑問，「作者」透過從Windows XP一路逆向到Windows 11的漫長過程，驚訝地發現這段程式碼並非古老的遺留，而是從<strong>Windows 10 1709</strong>版本之後才引入，甚至Windows Server 2016也包含了這段程式碼。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_12.jpg" /></p> <p>這一切的根源在於微軟20多年來堅持的<strong>OneCore理念</strong>，即讓包括Windows和Xbox在內的多個不同系統共用同一精簡內核。這個理念的目的是為了程式碼復用和開發效率，但有時也可能導致非目標平台殘留了不應存在的程式碼。雖然這種情況在日常使用中不會造成問題，但若被惡意利用，則可能造成不必要的困擾。影片最後鼓勵觀眾訂閱，並提到如果對逆向工程有興趣，可以關注「邊亮」以獲取更多技術細節。</p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">還記得我之前做過一期視頻。在桌面改個文件名。可以讓你的電腦變成賽博燈泡。沒想到一個國外博主發現了一個更無語的整蠱術。只要創建一個文件夾。重啟之後會陷入無限藍屏詛咒。是的，藍屏之後你重啟之後。立馬再次藍屏，無限循環......對於不懂技術的小白來說。這絕對是“P0級事故了”。所以有人一定會有疑問。這是什麼原因導致的？Windows為何就這麼脆弱？遇事不決，“亮”子力學！本期視頻給你答案！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">首先我們來復現一下。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">其實有兩種做法。1是如果在C:\Windows\System32\config。創建一個OSDATA文件。然後在裡面寫上。“關注EPC和邊亮，一鍵三連”。重啟後就藍屏了......如果你懶得寫字。第2種方法是直接創建一個OSDATA文件夾。然後重啟也會藍屏......笑死人，這OSDATA到底是什麼鬼東西。這個時候感覺Windows就是一個“碰瓷”的。我都還沒打到你呢，你就先倒下了！我們先解決第一個問題----碰瓷現場。C:\Windows\System32\config這個文件夾是幹什麼的。根據微軟官方文檔可以得出。這個文件夾是保存註冊表的數據庫文件。所以這個藍屏肯定和註冊表有關了。但是我都沒動任何現有文件。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">為啥也會藍屏呢？我們先從藍屏表象開始入手。按照我之前的兩種藍屏方法。創建一鍵三連文件藍屏是BAD SYSTEM CONFIG INFO。創建文件夾藍屏是CONFIG LIST FAILED。在藍屏“語言體系”中CONFIG就是指註冊表。我們分析了藍屏的原因。藍屏發生於初始化Windows過程中。且在進入桌面之前。正好卡在加載註冊表配置的階段。通過逆向發現。藍屏代碼位於ntkrnlmp.exe模塊中。對應文件是ntoskrnl.exe。我們逆向後發現，Windows註冊表。其內部有個hivelist就是註冊表配置文件清單。系統啟動的時候會主動加載hivelist中的文件。其中就有一個OSDATA。而有趣的是Windows官方文檔也提到了這個Hives。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">裡面就提到了......</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_118.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">“山姆”是什麼鬼啊。這什麼GOU SHI翻譯。我們切換成英文。這個Supporting files裡面就定義了config下的註冊表數據文件名稱。但奇怪的是。微軟文檔裡每一條都能對應到我們逆向的hivelist。但唯獨沒有OSDATA這個文件。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不過至少我們知道OSDATA就是註冊表配置文件。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我知道此時大家頭頂上依然有很多問號。不急，我們繼續逆向。當OSDATA為一鍵三連時。藍屏的地方是。CmpInitHiveFromFile. 而OSDATA是文件夾時，藍屏的地方是。CmpIsHiveLoadUnloadRundownActive. 這裡我們發現。此時藍屏並不是像上次殺毒軟件。代碼bug引發空指針導致系統崩潰。而是系統主動罷工！說人話就是windows有一個監視機制。當判斷系統出現不可挽救的嚴重問題時會主動藍屏。OSDATA和config目錄下其他文件一樣。都是註冊表數據庫文件。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">微軟程序員的邏輯是這樣。要麼它別存在，如果存在。一定是不能是有問題的。如果有問題，那就是嚴重到沒救了。系統罷工！顯然。“一鍵三連”或者把它變成文件夾。都是沒救了的。你想想，註冊表文件都壞了。那系統肯定是出大問題了。所以罷工了。大家覺得這個邏輯合理嗎？請把你的想法打在公屏上。現在。大家明白了OSDATA是註冊表文件。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">那麼它是給誰用的呢？</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_190.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">為什麼它默認不存在？</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不搜不知道，一搜讓我完全想不到。我們在xboxone的一個wiki中找到了這玩意。裡面赫然看到OSDATA字樣。原來這是XBOXONE的註冊表文件。裡面記錄著各種XBOX的配置文件。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">比如。虛擬磁盤映射，防火牆等等配置。那麼這個wiki裡面的OSDATA和Windows藍屏的這個OSDATA是一個東西嗎。我們還需要更多證據。微軟在某些系統核心組件可能採用了條件編譯。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">比如同樣是ntoskrnl.exe。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">xbox和windows會用同一個工程代碼。而採用類似宏定義的方法來區分xbox或者windows的代碼。或許處於某種考慮。這段代碼沒有編寫對應宏定義。使其在編譯的時候被去除。只不過這個bug如果不是刻意人為創建文件或文件夾。它永遠不會觸發。所以測試環節自然不會被發現。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">除了nt os kernel之外。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我們發現其他系統組件比如taskhostw其實也會嘗試訪問OSDATA。只不過全部都是失敗返回。根據這個行為數據。邊亮發現一個可疑之處taskhostw進程訪問了一個AppCompatFlag註冊表。然後查看調用堆棧發現。裡面有個飛行模式設置FlightSettings。dll. 然後我們再跟進去。發現GetFlightingRegistryPathForXbox函數。裡面赫然包含著各種OSDATA路徑的註冊表。可以看到GetFlightingRegistryPath函數判斷了當前是。default還是xbox。再加上我們查看了其資源。也有大量one的字樣。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_264.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">所以這印證了OSDATA就是xboxone的路徑。至於為什麼windows會有xbox代碼殘留。只能說windows的某些組件和xbox是共用的。當然你日常使用是不會觸發藍屏的。但是這如果被不懷好意的人用來整人。就不好說了。可能有些人會覺得。這一定是遠古屎山代碼導致的。雖然我也懷疑是這樣的。但是我還是得講證據。我很好奇這代碼到底是什麼時候引入的。於是邊亮從xp一路逆向到win11。結果發現這代碼是從win10 1709之後有的。連windows server 2016開始。也包含了這段代碼。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">其實one是包含了windows。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">xbox等一系列系統。因為Windows 20多年堅持的的OneCore理念。讓多個不同的系統使用同一精簡內核。所以這還真不是遠古屎山代碼遺留來的。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">好了，是不是又長見識了？</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">還沒有關注我們的記得關注哦！當然了。本視頻為了讓更多普通人能看懂。省略了一些技術細節。如果你有編程基礎，並對逆向感興趣。記得點邊亮的頭像，他會教你更多！</p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=hzWF2NNLhBY">https://www.youtube.com/watch?v=hzWF2NNLhBY</a></p><p>BGM:</p><p>Golden - KPop Demon Hunters (Violin Marimba Cover)</p><p>Mingle Song _Round and Round_</p><p>Thanks for @IssaraDuo </p><p>还记得我之前做过一期视频，在桌面改个文件名，可以让你的电脑变成赛博灯泡，没想到一个国外博主发现了一个更无语的整蛊术：只要创建一个文件夹，重启之后会陷入无限蓝屏诅咒，是的，蓝屏之后你重启之后，立马再次蓝屏，无限循环......到底是什么原因？</p><p></p><p></p><p>欢迎订阅👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p>Welcome to subscribe👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p></p><p>喜欢我的视频，请按赞、分享哦~</p><p>Like my video welcome hit like and share it~</p><p></p><p>开启小铃铛第一时间接收最新资讯~</p><p>🔔Light up the little bell and receive the latest news first</p>]]>
      </itunes:summary>
      <description>
        <![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/hzWF2NNLhBY/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=hzWF2NNLhBY">https://www.youtube.com/watch?v=hzWF2NNLhBY</a></p><h1>值得閱讀的理由</h1> <ul> <li>揭開一個讓Windows陷入「無限藍屏」循環的神秘檔案或資料夾，了解其背後的程式碼邏輯。</li> <li>深入探索Windows系統為何會因為一個看似無關緊要的「OSDATA」檔案而「主動罷工」。</li> <li>認識微軟的「OneCore」核心理念如何導致Windows與Xbox系統間的程式碼共享與殘留。</li> </ul> <hr /> <h1>摘要</h1> <p>這段影片延續了「作者」之前關於電腦桌面「賽博燈泡」的影片，揭示了一個更令人意外的電腦惡作劇。有國外部落客發現，只要在特定路徑下創建一個名為「OSDATA」的檔案或資料夾，電腦重啟後就會陷入無限的藍屏詛咒，對於不懂技術的使用者而言，這無疑是一場「P0級事故」。影片旨在探討導致這種現象的原因以及Windows系統為何如此「脆弱」。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_95.jpg" /></p> <h2>藍屏的重現與現象分析</h2> <p>「作者」示範了兩種觸發藍屏的方法。第一種是在<code>C:\Windows\System32\config</code>路徑下創建一個名為<strong>OSDATA</strong>的檔案，並隨意寫入內容，重啟後會出現「BAD SYSTEM CONFIG INFO」藍屏。第二種方法是直接在相同路徑創建一個名為<strong>OSDATA</strong>的資料夾，重啟後則會出現「CONFIG LIST FAILED」藍屏。這兩種情況都指向系統的<strong>註冊表配置</strong>出現問題，且藍屏發生在Windows初始化階段，在進入桌面之前，正好卡在加載註冊表配置的環節。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_212.jpg" /></p> <p>透過逆向工程分析，「作者」發現藍屏代碼位於<code>ntkrnlmp.exe</code>模組中，其對應檔案為<code>ntoskrnl.exe</code>。Windows註冊表的內部有一個名為<strong>hivelist</strong>的註冊表配置文件清單，系統啟動時會主動加載其中的檔案，而<strong>OSDATA</strong>赫然在列。儘管微軟官方文件並未明確提及<strong>OSDATA</strong>這個檔案，但透過藍屏的類型（BAD SYSTEM CONFIG INFO 和 CONFIG LIST FAILED），「作者」推斷<strong>OSDATA</strong>確實是一個與註冊表配置文件相關的檔案。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_301.jpg" /></p> <p>更深層次的逆向分析顯示，當<strong>OSDATA</strong>是一個文字檔案時，藍屏發生在<code>CmpInitHiveFromFile</code>；當它是一個資料夾時，藍屏發生在<code>CmpIsHiveLoadUnloadRundownActive</code>。這表明藍屏並非程式碼錯誤導致的崩潰，而是系統的<strong>主動罷工</strong>。Windows設有一個監測機制，當它判斷系統出現不可挽救的嚴重問題時，便會主動觸發藍屏。由於<strong>OSDATA</strong>被視為一個重要的註冊表數據庫檔案，如果它以錯誤的格式（例如文字檔案或資料夾）存在，系統便會認定其已損壞且無法修復，從而啟動「罷工」機制。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_6.jpg" /></p> <h2>OSDATA的真實身份：Xbox代碼殘留</h2> <p>「作者」進一步探究<strong>OSDATA</strong>的真實用途及為何它預設不存在於Windows系統中。令人驚訝的是，透過搜尋，<strong>OSDATA</strong>的字樣出現在Xbox One的一個Wiki頁面中，明確指出它是Xbox One的註冊表檔案，記錄著各種Xbox配置，例如虛擬磁盤映射和防火牆等。這引發了<strong>OSDATA</strong>是否是Xbox One相關檔案在Windows系統中的殘留的疑問。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_8.jpg" /></p> <p>「作者」解釋，微軟在某些系統核心組件中可能採用了<strong>條件編譯</strong>，使得Xbox和Windows可能共用同一份工程代碼（例如<code>ntoskrnl.exe</code>），並透過類似宏定義的方式來區分不同平台的程式碼。由於某種原因，這段涉及<strong>OSDATA</strong>的程式碼可能沒有被正確地編寫宏定義，使其在Windows編譯時沒有被移除。這也解釋了為什麼這個錯誤在日常使用中不會觸發，因為它需要人為刻意創建相關檔案或資料夾。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_9.jpg" /></p> <p>為了進一步證實這一點，「作者」和其團隊發現其他系統組件如<code>taskhostw</code>也會嘗試訪問<strong>OSDATA</strong>，儘管最終都返回失敗。透過追蹤<code>taskhostw</code>的行為，他們發現它訪問了一個<code>AppCompatFlag</code>註冊表，並在調用堆棧中找到了<code>FlightSettings.dll</code>以及一個名為<code>GetFlightingRegistryPathForXbox</code>的函數，該函數明確包含了各種<strong>OSDATA</strong>路徑的註冊表資訊，並判斷當前系統是「default」還是「xbox」。這些證據以及資源檔案中大量的「one」字樣，都印證了<strong>OSDATA</strong>確實是與Xbox One相關的路徑，說明Windows系統中確實存在與Xbox共用的程式碼組件。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_11.jpg" /></p> <h2>程式碼的起源與OneCore理念</h2> <p>關於這些殘留程式碼是否為「遠古屎山代碼」的疑問，「作者」透過從Windows XP一路逆向到Windows 11的漫長過程，驚訝地發現這段程式碼並非古老的遺留，而是從<strong>Windows 10 1709</strong>版本之後才引入，甚至Windows Server 2016也包含了這段程式碼。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_12.jpg" /></p> <p>這一切的根源在於微軟20多年來堅持的<strong>OneCore理念</strong>，即讓包括Windows和Xbox在內的多個不同系統共用同一精簡內核。這個理念的目的是為了程式碼復用和開發效率，但有時也可能導致非目標平台殘留了不應存在的程式碼。雖然這種情況在日常使用中不會造成問題，但若被惡意利用，則可能造成不必要的困擾。影片最後鼓勵觀眾訂閱，並提到如果對逆向工程有興趣，可以關注「邊亮」以獲取更多技術細節。</p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">還記得我之前做過一期視頻。在桌面改個文件名。可以讓你的電腦變成賽博燈泡。沒想到一個國外博主發現了一個更無語的整蠱術。只要創建一個文件夾。重啟之後會陷入無限藍屏詛咒。是的，藍屏之後你重啟之後。立馬再次藍屏，無限循環......對於不懂技術的小白來說。這絕對是“P0級事故了”。所以有人一定會有疑問。這是什麼原因導致的？Windows為何就這麼脆弱？遇事不決，“亮”子力學！本期視頻給你答案！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">首先我們來復現一下。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">其實有兩種做法。1是如果在C:\Windows\System32\config。創建一個OSDATA文件。然後在裡面寫上。“關注EPC和邊亮，一鍵三連”。重啟後就藍屏了......如果你懶得寫字。第2種方法是直接創建一個OSDATA文件夾。然後重啟也會藍屏......笑死人，這OSDATA到底是什麼鬼東西。這個時候感覺Windows就是一個“碰瓷”的。我都還沒打到你呢，你就先倒下了！我們先解決第一個問題----碰瓷現場。C:\Windows\System32\config這個文件夾是幹什麼的。根據微軟官方文檔可以得出。這個文件夾是保存註冊表的數據庫文件。所以這個藍屏肯定和註冊表有關了。但是我都沒動任何現有文件。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">為啥也會藍屏呢？我們先從藍屏表象開始入手。按照我之前的兩種藍屏方法。創建一鍵三連文件藍屏是BAD SYSTEM CONFIG INFO。創建文件夾藍屏是CONFIG LIST FAILED。在藍屏“語言體系”中CONFIG就是指註冊表。我們分析了藍屏的原因。藍屏發生於初始化Windows過程中。且在進入桌面之前。正好卡在加載註冊表配置的階段。通過逆向發現。藍屏代碼位於ntkrnlmp.exe模塊中。對應文件是ntoskrnl.exe。我們逆向後發現，Windows註冊表。其內部有個hivelist就是註冊表配置文件清單。系統啟動的時候會主動加載hivelist中的文件。其中就有一個OSDATA。而有趣的是Windows官方文檔也提到了這個Hives。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">裡面就提到了......</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_118.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">“山姆”是什麼鬼啊。這什麼GOU SHI翻譯。我們切換成英文。這個Supporting files裡面就定義了config下的註冊表數據文件名稱。但奇怪的是。微軟文檔裡每一條都能對應到我們逆向的hivelist。但唯獨沒有OSDATA這個文件。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不過至少我們知道OSDATA就是註冊表配置文件。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我知道此時大家頭頂上依然有很多問號。不急，我們繼續逆向。當OSDATA為一鍵三連時。藍屏的地方是。CmpInitHiveFromFile. 而OSDATA是文件夾時，藍屏的地方是。CmpIsHiveLoadUnloadRundownActive. 這裡我們發現。此時藍屏並不是像上次殺毒軟件。代碼bug引發空指針導致系統崩潰。而是系統主動罷工！說人話就是windows有一個監視機制。當判斷系統出現不可挽救的嚴重問題時會主動藍屏。OSDATA和config目錄下其他文件一樣。都是註冊表數據庫文件。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">微軟程序員的邏輯是這樣。要麼它別存在，如果存在。一定是不能是有問題的。如果有問題，那就是嚴重到沒救了。系統罷工！顯然。“一鍵三連”或者把它變成文件夾。都是沒救了的。你想想，註冊表文件都壞了。那系統肯定是出大問題了。所以罷工了。大家覺得這個邏輯合理嗎？請把你的想法打在公屏上。現在。大家明白了OSDATA是註冊表文件。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">那麼它是給誰用的呢？</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_190.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">為什麼它默認不存在？</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不搜不知道，一搜讓我完全想不到。我們在xboxone的一個wiki中找到了這玩意。裡面赫然看到OSDATA字樣。原來這是XBOXONE的註冊表文件。裡面記錄著各種XBOX的配置文件。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">比如。虛擬磁盤映射，防火牆等等配置。那麼這個wiki裡面的OSDATA和Windows藍屏的這個OSDATA是一個東西嗎。我們還需要更多證據。微軟在某些系統核心組件可能採用了條件編譯。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">比如同樣是ntoskrnl.exe。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">xbox和windows會用同一個工程代碼。而採用類似宏定義的方法來區分xbox或者windows的代碼。或許處於某種考慮。這段代碼沒有編寫對應宏定義。使其在編譯的時候被去除。只不過這個bug如果不是刻意人為創建文件或文件夾。它永遠不會觸發。所以測試環節自然不會被發現。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">除了nt os kernel之外。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我們發現其他系統組件比如taskhostw其實也會嘗試訪問OSDATA。只不過全部都是失敗返回。根據這個行為數據。邊亮發現一個可疑之處taskhostw進程訪問了一個AppCompatFlag註冊表。然後查看調用堆棧發現。裡面有個飛行模式設置FlightSettings。dll. 然後我們再跟進去。發現GetFlightingRegistryPathForXbox函數。裡面赫然包含著各種OSDATA路徑的註冊表。可以看到GetFlightingRegistryPath函數判斷了當前是。default還是xbox。再加上我們查看了其資源。也有大量one的字樣。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_264.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">所以這印證了OSDATA就是xboxone的路徑。至於為什麼windows會有xbox代碼殘留。只能說windows的某些組件和xbox是共用的。當然你日常使用是不會觸發藍屏的。但是這如果被不懷好意的人用來整人。就不好說了。可能有些人會覺得。這一定是遠古屎山代碼導致的。雖然我也懷疑是這樣的。但是我還是得講證據。我很好奇這代碼到底是什麼時候引入的。於是邊亮從xp一路逆向到win11。結果發現這代碼是從win10 1709之後有的。連windows server 2016開始。也包含了這段代碼。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">其實one是包含了windows。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">xbox等一系列系統。因為Windows 20多年堅持的的OneCore理念。讓多個不同的系統使用同一精簡內核。所以這還真不是遠古屎山代碼遺留來的。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">好了，是不是又長見識了？</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">還沒有關注我們的記得關注哦！當然了。本視頻為了讓更多普通人能看懂。省略了一些技術細節。如果你有編程基礎，並對逆向感興趣。記得點邊亮的頭像，他會教你更多！</p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=hzWF2NNLhBY">https://www.youtube.com/watch?v=hzWF2NNLhBY</a></p><p>BGM:</p><p>Golden - KPop Demon Hunters (Violin Marimba Cover)</p><p>Mingle Song _Round and Round_</p><p>Thanks for @IssaraDuo </p><p>还记得我之前做过一期视频，在桌面改个文件名，可以让你的电脑变成赛博灯泡，没想到一个国外博主发现了一个更无语的整蛊术：只要创建一个文件夹，重启之后会陷入无限蓝屏诅咒，是的，蓝屏之后你重启之后，立马再次蓝屏，无限循环......到底是什么原因？</p><p></p><p></p><p>欢迎订阅👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p>Welcome to subscribe👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p></p><p>喜欢我的视频，请按赞、分享哦~</p><p>Like my video welcome hit like and share it~</p><p></p><p>开启小铃铛第一时间接收最新资讯~</p><p>🔔Light up the little bell and receive the latest news first</p>]]>
      </description>
      <content:encoded><![CDATA[<hr style="clear:both" />

<p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://img.youtube.com/vi/hzWF2NNLhBY/maxresdefault.jpg" /></p><p><a href="https://www.youtube.com/watch?v=hzWF2NNLhBY">https://www.youtube.com/watch?v=hzWF2NNLhBY</a></p><h1>值得閱讀的理由</h1> <ul> <li>揭開一個讓Windows陷入「無限藍屏」循環的神秘檔案或資料夾，了解其背後的程式碼邏輯。</li> <li>深入探索Windows系統為何會因為一個看似無關緊要的「OSDATA」檔案而「主動罷工」。</li> <li>認識微軟的「OneCore」核心理念如何導致Windows與Xbox系統間的程式碼共享與殘留。</li> </ul> <hr /> <h1>摘要</h1> <p>這段影片延續了「作者」之前關於電腦桌面「賽博燈泡」的影片，揭示了一個更令人意外的電腦惡作劇。有國外部落客發現，只要在特定路徑下創建一個名為「OSDATA」的檔案或資料夾，電腦重啟後就會陷入無限的藍屏詛咒，對於不懂技術的使用者而言，這無疑是一場「P0級事故」。影片旨在探討導致這種現象的原因以及Windows系統為何如此「脆弱」。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_95.jpg" /></p> <h2>藍屏的重現與現象分析</h2> <p>「作者」示範了兩種觸發藍屏的方法。第一種是在<code>C:\Windows\System32\config</code>路徑下創建一個名為<strong>OSDATA</strong>的檔案，並隨意寫入內容，重啟後會出現「BAD SYSTEM CONFIG INFO」藍屏。第二種方法是直接在相同路徑創建一個名為<strong>OSDATA</strong>的資料夾，重啟後則會出現「CONFIG LIST FAILED」藍屏。這兩種情況都指向系統的<strong>註冊表配置</strong>出現問題，且藍屏發生在Windows初始化階段，在進入桌面之前，正好卡在加載註冊表配置的環節。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_212.jpg" /></p> <p>透過逆向工程分析，「作者」發現藍屏代碼位於<code>ntkrnlmp.exe</code>模組中，其對應檔案為<code>ntoskrnl.exe</code>。Windows註冊表的內部有一個名為<strong>hivelist</strong>的註冊表配置文件清單，系統啟動時會主動加載其中的檔案，而<strong>OSDATA</strong>赫然在列。儘管微軟官方文件並未明確提及<strong>OSDATA</strong>這個檔案，但透過藍屏的類型（BAD SYSTEM CONFIG INFO 和 CONFIG LIST FAILED），「作者」推斷<strong>OSDATA</strong>確實是一個與註冊表配置文件相關的檔案。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_301.jpg" /></p> <p>更深層次的逆向分析顯示，當<strong>OSDATA</strong>是一個文字檔案時，藍屏發生在<code>CmpInitHiveFromFile</code>；當它是一個資料夾時，藍屏發生在<code>CmpIsHiveLoadUnloadRundownActive</code>。這表明藍屏並非程式碼錯誤導致的崩潰，而是系統的<strong>主動罷工</strong>。Windows設有一個監測機制，當它判斷系統出現不可挽救的嚴重問題時，便會主動觸發藍屏。由於<strong>OSDATA</strong>被視為一個重要的註冊表數據庫檔案，如果它以錯誤的格式（例如文字檔案或資料夾）存在，系統便會認定其已損壞且無法修復，從而啟動「罷工」機制。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_6.jpg" /></p> <h2>OSDATA的真實身份：Xbox代碼殘留</h2> <p>「作者」進一步探究<strong>OSDATA</strong>的真實用途及為何它預設不存在於Windows系統中。令人驚訝的是，透過搜尋，<strong>OSDATA</strong>的字樣出現在Xbox One的一個Wiki頁面中，明確指出它是Xbox One的註冊表檔案，記錄著各種Xbox配置，例如虛擬磁盤映射和防火牆等。這引發了<strong>OSDATA</strong>是否是Xbox One相關檔案在Windows系統中的殘留的疑問。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_8.jpg" /></p> <p>「作者」解釋，微軟在某些系統核心組件中可能採用了<strong>條件編譯</strong>，使得Xbox和Windows可能共用同一份工程代碼（例如<code>ntoskrnl.exe</code>），並透過類似宏定義的方式來區分不同平台的程式碼。由於某種原因，這段涉及<strong>OSDATA</strong>的程式碼可能沒有被正確地編寫宏定義，使其在Windows編譯時沒有被移除。這也解釋了為什麼這個錯誤在日常使用中不會觸發，因為它需要人為刻意創建相關檔案或資料夾。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_9.jpg" /></p> <p>為了進一步證實這一點，「作者」和其團隊發現其他系統組件如<code>taskhostw</code>也會嘗試訪問<strong>OSDATA</strong>，儘管最終都返回失敗。透過追蹤<code>taskhostw</code>的行為，他們發現它訪問了一個<code>AppCompatFlag</code>註冊表，並在調用堆棧中找到了<code>FlightSettings.dll</code>以及一個名為<code>GetFlightingRegistryPathForXbox</code>的函數，該函數明確包含了各種<strong>OSDATA</strong>路徑的註冊表資訊，並判斷當前系統是「default」還是「xbox」。這些證據以及資源檔案中大量的「one」字樣，都印證了<strong>OSDATA</strong>確實是與Xbox One相關的路徑，說明Windows系統中確實存在與Xbox共用的程式碼組件。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_11.jpg" /></p> <h2>程式碼的起源與OneCore理念</h2> <p>關於這些殘留程式碼是否為「遠古屎山代碼」的疑問，「作者」透過從Windows XP一路逆向到Windows 11的漫長過程，驚訝地發現這段程式碼並非古老的遺留，而是從<strong>Windows 10 1709</strong>版本之後才引入，甚至Windows Server 2016也包含了這段程式碼。</p> <p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_12.jpg" /></p> <p>這一切的根源在於微軟20多年來堅持的<strong>OneCore理念</strong>，即讓包括Windows和Xbox在內的多個不同系統共用同一精簡內核。這個理念的目的是為了程式碼復用和開發效率，但有時也可能導致非目標平台殘留了不應存在的程式碼。雖然這種情況在日常使用中不會造成問題，但若被惡意利用，則可能造成不必要的困擾。影片最後鼓勵觀眾訂閱，並提到如果對逆向工程有興趣，可以關注「邊亮」以獲取更多技術細節。</p> <hr /><hr />================================================</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">還記得我之前做過一期視頻。在桌面改個文件名。可以讓你的電腦變成賽博燈泡。沒想到一個國外博主發現了一個更無語的整蠱術。只要創建一個文件夾。重啟之後會陷入無限藍屏詛咒。是的，藍屏之後你重啟之後。立馬再次藍屏，無限循環......對於不懂技術的小白來說。這絕對是“P0級事故了”。所以有人一定會有疑問。這是什麼原因導致的？Windows為何就這麼脆弱？遇事不決，“亮”子力學！本期視頻給你答案！</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">首先我們來復現一下。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">其實有兩種做法。1是如果在C:\Windows\System32\config。創建一個OSDATA文件。然後在裡面寫上。“關注EPC和邊亮，一鍵三連”。重啟後就藍屏了......如果你懶得寫字。第2種方法是直接創建一個OSDATA文件夾。然後重啟也會藍屏......笑死人，這OSDATA到底是什麼鬼東西。這個時候感覺Windows就是一個“碰瓷”的。我都還沒打到你呢，你就先倒下了！我們先解決第一個問題----碰瓷現場。C:\Windows\System32\config這個文件夾是幹什麼的。根據微軟官方文檔可以得出。這個文件夾是保存註冊表的數據庫文件。所以這個藍屏肯定和註冊表有關了。但是我都沒動任何現有文件。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">為啥也會藍屏呢？我們先從藍屏表象開始入手。按照我之前的兩種藍屏方法。創建一鍵三連文件藍屏是BAD SYSTEM CONFIG INFO。創建文件夾藍屏是CONFIG LIST FAILED。在藍屏“語言體系”中CONFIG就是指註冊表。我們分析了藍屏的原因。藍屏發生於初始化Windows過程中。且在進入桌面之前。正好卡在加載註冊表配置的階段。通過逆向發現。藍屏代碼位於ntkrnlmp.exe模塊中。對應文件是ntoskrnl.exe。我們逆向後發現，Windows註冊表。其內部有個hivelist就是註冊表配置文件清單。系統啟動的時候會主動加載hivelist中的文件。其中就有一個OSDATA。而有趣的是Windows官方文檔也提到了這個Hives。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">裡面就提到了......</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_118.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">“山姆”是什麼鬼啊。這什麼GOU SHI翻譯。我們切換成英文。這個Supporting files裡面就定義了config下的註冊表數據文件名稱。但奇怪的是。微軟文檔裡每一條都能對應到我們逆向的hivelist。但唯獨沒有OSDATA這個文件。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不過至少我們知道OSDATA就是註冊表配置文件。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我知道此時大家頭頂上依然有很多問號。不急，我們繼續逆向。當OSDATA為一鍵三連時。藍屏的地方是。CmpInitHiveFromFile. 而OSDATA是文件夾時，藍屏的地方是。CmpIsHiveLoadUnloadRundownActive. 這裡我們發現。此時藍屏並不是像上次殺毒軟件。代碼bug引發空指針導致系統崩潰。而是系統主動罷工！說人話就是windows有一個監視機制。當判斷系統出現不可挽救的嚴重問題時會主動藍屏。OSDATA和config目錄下其他文件一樣。都是註冊表數據庫文件。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">微軟程序員的邏輯是這樣。要麼它別存在，如果存在。一定是不能是有問題的。如果有問題，那就是嚴重到沒救了。系統罷工！顯然。“一鍵三連”或者把它變成文件夾。都是沒救了的。你想想，註冊表文件都壞了。那系統肯定是出大問題了。所以罷工了。大家覺得這個邏輯合理嗎？請把你的想法打在公屏上。現在。大家明白了OSDATA是註冊表文件。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">那麼它是給誰用的呢？</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_190.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">為什麼它默認不存在？</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">不搜不知道，一搜讓我完全想不到。我們在xboxone的一個wiki中找到了這玩意。裡面赫然看到OSDATA字樣。原來這是XBOXONE的註冊表文件。裡面記錄著各種XBOX的配置文件。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">比如。虛擬磁盤映射，防火牆等等配置。那麼這個wiki裡面的OSDATA和Windows藍屏的這個OSDATA是一個東西嗎。我們還需要更多證據。微軟在某些系統核心組件可能採用了條件編譯。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">比如同樣是ntoskrnl.exe。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">xbox和windows會用同一個工程代碼。而採用類似宏定義的方法來區分xbox或者windows的代碼。或許處於某種考慮。這段代碼沒有編寫對應宏定義。使其在編譯的時候被去除。只不過這個bug如果不是刻意人為創建文件或文件夾。它永遠不會觸發。所以測試環節自然不會被發現。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">除了nt os kernel之外。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">我們發現其他系統組件比如taskhostw其實也會嘗試訪問OSDATA。只不過全部都是失敗返回。根據這個行為數據。邊亮發現一個可疑之處taskhostw進程訪問了一個AppCompatFlag註冊表。然後查看調用堆棧發現。裡面有個飛行模式設置FlightSettings。dll. 然後我們再跟進去。發現GetFlightingRegistryPathForXbox函數。裡面赫然包含著各種OSDATA路徑的註冊表。可以看到GetFlightingRegistryPath函數判斷了當前是。default還是xbox。再加上我們查看了其資源。也有大量one的字樣。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; "><p><img src="https://democwise2016.github.io/action-RSS-UT-Weekly-202508/file-cache/hzWF2NNLhBY_264.jpg" /></p></p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">所以這印證了OSDATA就是xboxone的路徑。至於為什麼windows會有xbox代碼殘留。只能說windows的某些組件和xbox是共用的。當然你日常使用是不會觸發藍屏的。但是這如果被不懷好意的人用來整人。就不好說了。可能有些人會覺得。這一定是遠古屎山代碼導致的。雖然我也懷疑是這樣的。但是我還是得講證據。我很好奇這代碼到底是什麼時候引入的。於是邊亮從xp一路逆向到win11。結果發現這代碼是從win10 1709之後有的。連windows server 2016開始。也包含了這段代碼。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">其實one是包含了windows。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">xbox等一系列系統。因為Windows 20多年堅持的的OneCore理念。讓多個不同的系統使用同一精簡內核。所以這還真不是遠古屎山代碼遺留來的。</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">好了，是不是又長見識了？</p><p style="max-width: calc(100vw - 1rem);  word-wrap: break-word; overflow-wrap: break-word; ">還沒有關注我們的記得關注哦！當然了。本視頻為了讓更多普通人能看懂。省略了一些技術細節。如果你有編程基礎，並對逆向感興趣。記得點邊亮的頭像，他會教你更多！</p>

<hr style="clear:both" />
=============
<p><a href="https://www.youtube.com/watch?v=hzWF2NNLhBY">https://www.youtube.com/watch?v=hzWF2NNLhBY</a></p><p>BGM:</p><p>Golden - KPop Demon Hunters (Violin Marimba Cover)</p><p>Mingle Song _Round and Round_</p><p>Thanks for @IssaraDuo </p><p>还记得我之前做过一期视频，在桌面改个文件名，可以让你的电脑变成赛博灯泡，没想到一个国外博主发现了一个更无语的整蛊术：只要创建一个文件夹，重启之后会陷入无限蓝屏诅咒，是的，蓝屏之后你重启之后，立马再次蓝屏，无限循环......到底是什么原因？</p><p></p><p></p><p>欢迎订阅👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p>Welcome to subscribe👉<a href="https://is.gd/p1FPdr">https://is.gd/p1FPdr</a></p><p></p><p>喜欢我的视频，请按赞、分享哦~</p><p>Like my video welcome hit like and share it~</p><p></p><p>开启小铃铛第一时间接收最新资讯~</p><p>🔔Light up the little bell and receive the latest news first</p>]]></content:encoded>
      <itunes:image href="https://i.ytimg.com/vi/hzWF2NNLhBY/hqdefault.jpg"/>
      <pubDate>2025-08-17T01:53:55.000Z</pubDate>
    </item></channel>
</rss>